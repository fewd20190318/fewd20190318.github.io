[
{
	"uri": "/21-class-resources/homework-submission-github-workflow/",
	"title": "Github HW Submission Instructions",
	"tags": [],
	"description": "",
	"content": " Before you start Step 1: Ensure you have a github folder Ensure that you have a folder named gitHub in the FEWD folder . You will be using this folder to manage all of your work that lives in Github through the course. This folder only needs to be created once.\nStep 2: Log into to your Github account Ensure you are logged into your GitHub account on Github.com\nStep 3: Log into your Github Desktop application Ensure You have installed the Github Desktop Application on your computer and you have logged in the application using your GitHub username and password\nForking the Assignment Repository Step 4: Navigate to the HW Repository on Github.com The instructor will provide you with a link to the repository that houses the HW assignment on Github.com. Click on that link and you should be navigated to the repository page for the assignment located on Github.com.\nStep 5: Fork the HW Repository to create a copy under your account Next we will fork the repository that contains the homework assignment. Remember, forking a repository copies a repository and places it under your account.\nFork the repository by pressing the Fork button in the upper right hand corner:\nIf you have more than one Github account associated with your email address, you will be asked to pick one. I recommended that you select the account associated with your personal account (this is most likely listed first in the list).\n Step 6: Confirm fork was successful Confirm that the fork was successful by observing that a copy of the repository has been placed under your account.\nIn the example above, the github account named kareemgrant successfully forked (i.e. copied) the HW assignment repository (sample-hw-assignment) that is owned by an account named fewd20190318\nCloning the forked repository Congrats! You have forked the HW assignment repository to your account. However, you\u0026rsquo;re still not able to work on it, since the forked repository lives in the cloud on Github (another way to say this is that your repository is a remote repository) and you need a copy of the repository on your computer so you can work on it.\n The process of creating a local copy (i.e. on your computer) of a remote repository is called cloning. Cloning also allows both local and remote copies of a repository to stay in sync.\n We\u0026rsquo;ll be using the Github Desktop Application to clone our remote repositories. Make sure you have Github Desktop open on your computer. Also make sure you are signed in.\n  Step 7: Clone the forked repository Clone the repository by pressing on the button labeled Clone or download and then press the button labeled Open in Desktop. This action will open the Github Desktop application located on your computer.\nStep 8: Place the cloned repo into your FEWD/github folder While in Github Desktop navigate to your github folder located inside your FEWD folder (see Step 1)\nStep 9: Confirm clone was successfully placed in your FEWD/github folder On your computer, navigate to your FEWD/github folder and confirm the existences of a folder that has name that matches the name of your remote repository\nWorking on your assignment If you\u0026rsquo;ve made it this far you have successfully cloned your assignment repository and now you\u0026rsquo;re ready to start coding! Going forward, all of your work on this particular assignment will live in your FEWD/github/{name-of-your-assignment-repository} folder\nStep 10: Open the repository folder in your text editor Using Atom, open the project folder for your assignment repository (FEWD/github/{name-of-your-assignment-repository})\nYou should always open the top-level folder for your project with your text editor (Atom) and not individually project files. This will help you stay organized and help you keep your sanity.\n One way to confirm that you\u0026rsquo;ve opened the \u0026ldquo;top-level\u0026rdquo; folder of a project is to confirm that you can see only one project and all of its child files/folders in the Tree View located in the left pane. Use cmd + \\ (mac) or ctrl+\\ (pc) to toggle the Tree View\nStep 11: Work on your assignment You are going to work on your assignment the way your normally would. Ensuring that you constantly save your work (cmd+s - mac / ctrl+s - pc ) along the way.\n(Git) Commit your work While you work on your assignment it is highly recommended that you periodically Commit your code.\nCommitting is Git\u0026rsquo;s way of saving the history of the changes you\u0026rsquo;ve made on the assignment (much like the \u0026ldquo;Track Changes\u0026rdquo; feature of word processors). A commit takes a \u0026ldquo;snapshot\u0026rdquo; of your project\u0026rsquo;s entire codebase. This is extremely powerful as it allows you to \u0026ldquo;time travel\u0026rdquo; throughout your code.\nIt is a best practice to commit your code once you\u0026rsquo;ve finished a \u0026ldquo;unit\u0026rdquo; of work.\nIf you approach your assignments by breaking them up in parts or tasks, then a unit would represent that task.\nFor example: If you were tasked with building a portfolio site for a client the project could be broken into a series of small tasks such as:\n implement design layout\n add css styles\n add portfolio images\n etc\n  If you were using git, it would be a best practice to have a commit for each one of the tasks above.\nWhy? Because if something breaks and is beyond repair, you can easily revert to a past commit that you know works.\nGit requires that you submit a message with each commit. This message is used to communicate the unit of work that was done.\nStep 12: Make a commit using Github Desktop After you\u0026rsquo;ve made changes associated with a \u0026ldquo;unit\u0026rdquo; of work, you\u0026rsquo;re ready to commit.\nOpen Github Desktop and ensure that you have selected the correct project (in Github Desktop)\nAfter you commit you can go back to working on your \u0026ldquo;next unit of work\u0026rdquo; or step.\nYou aren\u0026rsquo;t required to take this approach of breaking up your assignment into tasks (or units of work) but it is highly recommended.\n (Git) Push your work to Github to keep your work synced You have been committing your code periodically and now you\u0026rsquo;d like to see your changes reflected on Github.com (i.e. the remote repository). However, after navigating to remote repository on Github.com you find that none of your recent changes are being reflected.\nThe reason you don\u0026rsquo;t see anything is because you haven\u0026rsquo;t pushed your code back up to the remote repository on Github. Pushing your code keeps your local repository and its associated remote repository in sync.\nStep 13: Push your code back to the remote repository on Github.com In Github Desktop (after you have committed all your changes) press the button labeled Push Origin to push your changes to Github.\nStep 14: Confirm your commits were successfully \u0026ldquo;pushed\u0026rdquo; back to Github.com Navigate to remote repository for the assignment on Github.com (i.e. the assignment repository that is located under your Github account).\nConfirm that the changes you made are displayed in the commit history of the remote repository.\nIn this example we see that the changes made locally (on your computers) are now reflected (aka they were synced) with the associated remote repository!\nSubmit your homework by making a Pull Request You\u0026rsquo;ve made all our commits and you\u0026rsquo;ve finished the assignment. Now you are ready to submit your homework for feedback.\nStep 15: Make a pull request  While in your repository press the link labeled Pull requests to submit your homework. See gif below for more information.\n Press the green button labeled New pull request\n You will be taken to the \u0026ldquo;Open a pull request\u0026rdquo; screen that contains some dropdowns, these dropdowns do not need to be changed.  Then press the green button labeled Create pull request\n In the title field of the pull request, name your pull request using the following format: HW Submission by [Your Full Name]\n Finally, press the green button labeled Create pull request to complete the process of submitting your homework\n  See the example below:\n"
},
{
	"uri": "/01-html-basics/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Understand how web pages are structured\n Introduce some of the most frequently used html tags\n  "
},
{
	"uri": "/00-course-intro-and-tools/",
	"title": "Course Introduction &amp; Tools",
	"tags": [],
	"description": "",
	"content": " Lesson 00 Class Introduction \u0026amp; Tools "
},
{
	"uri": "/06-css-box-model/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Discuss how CSS Cascades\n Box Model\n Code Along: Tags \u0026amp; Boxes\n Lab: Fashion Blog\n  "
},
{
	"uri": "/03-relative-paths/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Learn about Relative Paths and why they are important  "
},
{
	"uri": "/01-html-basics/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " HTML Structure\n Overview of basic HTML Tags\n Code Along (GA Press Release)\n Lab (Cookie Recipe)\n  "
},
{
	"uri": "/03-relative-paths/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Discuss Relative Paths\n Complete Relative Paths exercise\n  "
},
{
	"uri": "/06-css-box-model/box-model-overview/margin/",
	"title": "Margin",
	"tags": [],
	"description": "",
	"content": " Margin  Margin represents the space between boxes  .thing { /* margin can be applied to individual sides of a box using margin-top, margin-bottom, margin-left or margin-right */ /* style below applies 20px to left side of box */ margin-left: 20px; } .other-thing { /* style below applies 10px to all four sides of box */ margin: 10px; } .gizmo { /* when 4 values are provided, then values are applied in a clockwork manner: margin: [top] [right] [bottom] [left]; */ /* style below applies 4px to top, 10px to right, 6px to bottom \u0026amp; 10px to left */ margin: 4px 10px 6px 10px; } .other-gizmo { /* when 2 values are represented as follows margin: [top \u0026amp; bottom], [left, right]; */ /* style below applies 4px to top \u0026amp; bottom and 10px to right \u0026amp; left */ margin: 4px 10px; }  JS Bin on jsbin.com\n"
},
{
	"uri": "/02-git-github/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Achieve high-level understanding of git and why developers use it\n Introduce students to a git workflow that will be used to submit (and recieve feeback on) assignments\n  "
},
{
	"uri": "/03-relative-paths/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " Relative Paths  Relative URLs can be used when linking to pages and files within your own website.\n Shorthand way of telling the browser where to find your files.\n Inform students that they have already seen this is use with the link tag when referencing a css file\n  "
},
{
	"uri": "/02-git-github/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Tools Overview \u0026amp; Folder Organization\n Git Overview\n Code Along: Working with Github\n Exercise: Working with Github\n  "
},
{
	"uri": "/01-html-basics/html-structure/",
	"title": "HTML Structure",
	"tags": [],
	"description": "",
	"content": " Front page of a newspaper\n Which elements stand out and why?\n What would happen if every word was the same size font?\n  Document in a word processor\nHTML document\nSummary  Structure helps readers better understand all forms of documents\n Documents leverage hierarchy, size and font weight to emphasize importance\n HTML pages are another type documents\n  "
},
{
	"uri": "/01-html-basics/",
	"title": "HTML Basics",
	"tags": [],
	"description": "",
	"content": " Lesson 01 HTML Basics "
},
{
	"uri": "/06-css-box-model/css-cascading-guidelines/",
	"title": "CSS Cascading Guidelines",
	"tags": [],
	"description": "",
	"content": " How CSS Cascades There are guidelines that will determine which CSS rule takes precedent in the case of a conflict (when 2 or more css rules target the same selector)\n Last Rule\n Specificity\n Important\n Inheritance\n  "
},
{
	"uri": "/06-css-box-model/css-cascading-guidelines/last-rule/",
	"title": "Last Rule",
	"tags": [],
	"description": "",
	"content": " Last Rule  When two or more css rules have identical selectors, the latter of the two rules takes precedent   // in css p { color: red; } p { color: green; }  \u0026lt;!-- in html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt; Color will be green\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Here the \u0026lt;p\u0026gt; tag will be green because the last conflicting rule took precedent\nLive Example\nJS Bin on jsbin.com\nIn the example above, we have identical selectors .box where each has a different property for background-color. In this case, the last rule law will apply and the background-color of the element will be red since it is listed last (in the css file) among the conflicting selectors.\n"
},
{
	"uri": "/06-css-box-model/box-model-overview/padding/",
	"title": "Padding",
	"tags": [],
	"description": "",
	"content": " Padding  Padding is the space between the border of a box and any content contained within it\n Adding padding helps to increase readability of a box’s content\n  .thing { /* padding can be applied to individual sides of a box using padding-top, padding-bottom, padding-left or padding-right */ /* style below applies 20px to left side of box */ padding-left: 20px; } .other-thing { /* style below applies 10px to all four sides of box */ padding: 10px; } .gizmo { /* when 4 values are provided, then values are applied in a clockwork manner: padding: [top] [right] [bottom] [left]; */ /* style below applies 4px to top, 10px to right, 6px to bottom \u0026amp; 10px to left */ padding: 4px 10px 6px 10px; } .other-gizmo { /* when 2 values are represented as follows padding: [top \u0026amp; bottom], [left, right]; */ /* style below applies 4px to top \u0026amp; bottom and 10px to right \u0026amp; left */ padding: 4px 10px; }  JS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/html-tag-anatomy/",
	"title": "HTML Tag Anatomy",
	"tags": [],
	"description": "",
	"content": " What is a Tag?  Tags act like containers, they tell the browser what type of information lies between (aka the content) the opening and closing tag\n Opening Tag\n comprised of character(s) surrounded by less than and equal than signs (brackets) characters within the brackets indicates the tags purpose  Closing Tag\n Same as opening tag except closing tag contains a forward slash which informs browser that element has ended   Terms “tags” and “elements” are often used interchangeably\n Example  \u0026lt;a href=\u0026quot;https://www.cnn.com\u0026quot;\u0026gt; CNN \u0026lt;/a\u0026gt;  "
},
{
	"uri": "/07-page-layout-flexbox/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Block and Inline Elements\n Containing Elements\n Semantic Elements\n Flexbox\n Exercise: Flexbox Froggy\n Code Along: Layout Challenge\n Lab: Layout Challenge\n  "
},
{
	"uri": "/03-relative-paths/example/",
	"title": "Example",
	"tags": [],
	"description": "",
	"content": " Example Project with Multiple Folders/Files Navigating within the Same Folder Linking from music index page to the music reviews page\n\u0026lt;a href=\u0026quot;reviews.html\u0026quot;\u0026gt; Music Reviews \u0026lt;/a\u0026gt;  Navigating to a file in a Child Folder Linking from the homepage (top-level index.html) to the music listings page\n\u0026lt;a href=\u0026quot;music/listings.html\u0026quot;\u0026gt; Music Listings \u0026lt;/a\u0026gt;  Navigating to a file in a Grandchild Folder Linking from the homepage (top-level index.html) to the dvd reviews page\n\u0026lt;a href=\u0026quot;movies/dvds/reviews.html\u0026quot;\u0026gt; DVD Reviews \u0026lt;/a\u0026gt;  Navigating up to a file in a Parent Folder Linking from the music reviews page to the homepage (top-level index.html)\n\u0026lt;a href=\u0026quot;../index.html\u0026quot;\u0026gt; Home \u0026lt;/a\u0026gt;  Use ../ to move up exactly 1 level in the folder hierarchy\nNavigating up to a file in a Grandparent Folder Linking from the dvd reviews page to the homepage (top-level index.html)\n\u0026lt;a href=\u0026quot;../../index.html\u0026quot;\u0026gt; Home \u0026lt;/a\u0026gt;  Here we used ../../ to move up 2 levels in the folder hierarchy\n"
},
{
	"uri": "/02-git-github/git-overview/",
	"title": "Git Overview",
	"tags": [],
	"description": "",
	"content": " What is Git?  Version control for Programmers\n Like Microsoft Word \u0026ldquo;Track Changes\u0026rdquo; feature with superpowers\n Makes it easy for programmers to collaborate and work on the same codebase\n SVN (subversion) and CVS are other version control programs (Git is the most popular)\n  What is Github?  Web-based Git repository hosting service\n Built on top of git\n Home to +90% of all open source projects\n Morphed into a \u0026ldquo;social network\u0026rdquo; for developers\n  Vocabulary  Repository Commit Branch Merge Push Pull Fork Clone Pull Request  Respository  Most basic element of GitHub\n A repository can be referred to as a projeect\n contains all of a project\u0026rsquo;s files\n Stores each file\u0026rsquo;s revision history\n Repositories can have multiple collaborators and can be either public or private.\n  Commit  A \u0026ldquo;revision\u0026rdquo;, is an individual change to a file (or set of files)\n Git\u0026rsquo;s version of \u0026ldquo;saving\u0026rdquo;\n Commits save a \u0026ldquo;snapshot\u0026rdquo; of all of the project\u0026rsquo;s files at that point in time\n Using commits you can \u0026ldquo;time travel\u0026rdquo; and navigate back to any previous commit that was made throughout the history of the project\n Commits usually contain a commit message which is a brief description of what changes were made\n  Branch  Parallel version of a repository\n Branches allow developers to work on new features without affecting the \u0026ldquo;master\u0026rdquo; branch and disrupting the \u0026ldquo;live\u0026rdquo; version\n The process of creating a separate branch to work on a feature is referred to as \u0026ldquo;creating a feature branch\u0026ldquo;\n After developers have added their new feature (on their feature branch) they will then make a Pull Request (which is a request for comments and a request to Merge their changes back into the main branch (master branch))\n  Master Branch  The default branch found in every Git respository\n For most companies, the master branch reflects that latest version of production code (i.e. working code available to customers)\n  Merge  Merging takes the changes from one branch (in the same repository or from a fork), and applies them into another\n This often happens as a Pull Request (which can be thought of as a request for comments and a request to merge into the another branch - usually the master branch)\n  Push  Refers to sending your committed changes to a remote repository such as GitHub.com\n For instance, if you change something locally, you\u0026rsquo;d want to then push those changes so that others may access them\n  Pull  Pulls code from a remote repository and merges it with code in your local repository (on your computer)  Fork  A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project\n Most commonly, forks are used to either propose changes to someone else\u0026rsquo;s project or to use someone else\u0026rsquo;s project as a starting point for your own idea\n  Clone  Copies a remote repository (i.e. repository in the cloud on a platform like Github.com) and creates a local copy of the repository on your computer\n Cloning creates a link between the the remote and local copy of a repository, allowing you to your code in sync between the two\n  Pull Request  Pull requests are proposed changes to a repository submitted by a user and accepted or rejected by a repository\u0026rsquo;s collaborators (i.e. team members).\n Pull requests can be thought of as a developer asking for permission to merge their changes into the master branch\n Pull requests each have their own discussion forum, where developer can discuss the changes requested and suggest further revisions.\n This discussion as also referred to as Code Reviews\n  Great resource for all things git can be found here\n "
},
{
	"uri": "/07-page-layout-flexbox/block-inline-elements/",
	"title": "Block and Inline Elements",
	"tags": [],
	"description": "",
	"content": " Block Level Elements  Always appear on a new line or row\n By default, block elements take up an entire row regardless of the width of their content\n Example block elements: \u0026lt;p\u0026gt;, \u0026lt;h1\u0026gt;, \u0026lt;div\u0026gt;\n  JS Bin on jsbin.com\nFull list of block level elements can be found here\n Inline Elements  Sit within a block level element and do not start on a new line\n By default, inline elements only occupy the horizontal space needed to fit its content\n The height and width properties of an inline element will not be recognized\n Example inline elements: \u0026lt;a\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;span\u0026gt;\n  JS Bin on jsbin.com\nFull list of inline elements can be found here\n Inline-Block  Allows you make an element inline while also allowing the element to recognize height and width properties\n inline-block is set as a value of the display property in CSS\n  JS Bin on jsbin.com\nChanging Default Layout Behavior of Elements  The default layout behavior of elements can be overriden using the display property in CSS  // in css p.customer-logos { display: inline; }  In the example above, we are using CSS to change the matching \u0026lt;p\u0026gt; elements (with a class of customer-logos) to display inline instead of its default display layout behavior of block\nFor more information about the display property click here\n "
},
{
	"uri": "/00-dev-tools-github-depr/github-tutorial/",
	"title": "Git Tutorial",
	"tags": [],
	"description": "",
	"content": " Initial Setup Step 1: Create a Github Account* *one-time step\n\u0026nbsp;\nStep 2: Download Github Desktop software* *one-time step\n\u0026nbsp;\nStep 3: Sign in to Github Account through the Github Desktop application  Github Desktop -\u0026gt; Preferences -\u0026gt; Accounts  *one-time step / Use your Github account username \u0026amp; password\n\u0026nbsp;\nStep 4: Create a folder named github in your \u0026ldquo;class\u0026rdquo; folder* *one-time step\n\u0026nbsp;\nStarting an Assignment Step 5a: Fork Instructor Repository  The link for the Instructor repository will be provided to you  \u0026nbsp;\nStep 5b: Fork Instructor Repository  Github will create a copy of the repo under your account  \u0026nbsp;\nStep 6: Confirm Repository was Successfully Forked \u0026nbsp;\nStep 7a: Clone Repository in Github \u0026nbsp;\nStep 7b: Click \u0026ldquo;Launch Application\u0026rdquo; button  This opens your Github Desktop application  \u0026nbsp;\nStep 7c: Select your \u0026ldquo;github\u0026rdquo; folder and click \u0026ldquo;clone\u0026rdquo;  This is where the project folder will live  \u0026nbsp;\nStep 8: Confirm Repo was created in Github Desktop \u0026nbsp;\nStep 9: Confirm project folder was created in \u0026ldquo;github\u0026rdquo; folder \u0026nbsp;\nStep 10a: Open project folder with sublime and add code (as you normally would) \u0026nbsp;\nStep 10b: View changes in Github Desktop \u0026nbsp;\nStep 11: Commit Your Changes \u0026nbsp;\nStep 12: Push your changes to Github.com \u0026nbsp;\nRepeat Steps 10 through 12 - as many times as needed\n \u0026nbsp;\nSubmitting Your Assignment Step 13a: Create a Pull Request in Github Desktop \u0026nbsp;\nStep 13b: Create a Pull Request in Github Desktop  Important: Pull request should be named: HW Submission from [Your Name]  \u0026nbsp;\nStep 13c: Create a Pull Request in Github Desktop \u0026nbsp;\nStep 14a: Confirm Creation of Pull Request on Github \u0026nbsp;\nStep 14b: Confirm Creation of Pull Request on Github \u0026nbsp;\nStep 14c: Confirm Creation of Pull Request on Github \u0026nbsp;\nReceive Feedback from Instructors Step 15a: Instructors will leave feedback and let you know what needs to be fixed  Hammer emojis indicate something that needs to be fixed  \u0026nbsp;\nStep 15b: Students can add comments of their own to get clarification \u0026nbsp;\nStep 16: Student Fixes Any Outstanding Issues (Hammer emojis) Repeat Steps 10 through 12\n Make your changes in sublime\n Commit your changes\n Push your changes\n  Do Not create a new Pull Request Your existing Pull Request will automatically be updated\n \u0026nbsp;\nStep 17: Instructor Reviews Changes  Instruction team will receive an email notification letting them know your Pull Request was updated Instruction team will confirm that \u0026ldquo;hammers\u0026rdquo; were addressed  \u0026nbsp;\nStep 18: Instructor Approves Your Assignment  Student will receive a \u0026ldquo;Thumbs Up\u0026rdquo; emoji indicating that the assignment was approved  "
},
{
	"uri": "/01-html-basics/html-attributes/",
	"title": "HTML Attributes",
	"tags": [],
	"description": "",
	"content": " What is an HTML Attribute?  Attributes provide additional information about the contents of the an element.\n They are placed in the opening tag\n They have two parts: name, value\n  Attribute Structure  Attribute Name\n Indicates what kind of extra information you are supplying to the browser about the content in the element characters within the brackets indicates the tags purpose  Attribute Value\n Information or setting for the attribute Is placed in double or single quotes   Example of a HTML Attribute  \u0026lt;img src=\u0026quot;mdn-logo-sm.png\u0026quot; alt=\u0026quot;MDN\u0026quot;\u0026gt;  A complete list of all the available HTML attributes can be found here\n "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flexbox-terminology/",
	"title": "Flexbox Terminology",
	"tags": [],
	"description": "",
	"content": " Flex Container  The parent element in which flex items are contained\n Defined using the flex or inline-flex values of the display property\n flex: will make the flex-container a block-level element\n inline-flex: will make the flex-container an inline element\n   Flex Item  Children of a flex container  Main Axis  The axis along which the flex items follow each other\n flex-direction property determines the main axis\n  Cross Axis  The axis perpendicular to the main axis  Main Axis and Cross Axis changes with Flex Direction  If the flex-direction is row or row-reverse then the main axis will be along the horizontal plane and the cross axis will be along the vertical plane\n If the flex-direction is column or column-reverse then the main axis will be along the vertical plane and the cross axis will be along the horizontal plane\n  "
},
{
	"uri": "/08-css-positioning-and-colors/background-images/background-image/",
	"title": "Background Image",
	"tags": [],
	"description": "",
	"content": " background-image Property  background-image property allows you to place an image behind any HTML element\n Image can be \u0026ldquo;behind\u0026rdquo; the entire page or part of a page\n By default a background image will repeat to fill an entire box\n  body { /* this image will be applied to the entire page */ background-image: url(\u0026quot;images/cool-background-image.gif\u0026quot;); } .hero-section { /* this image will be applied to container with a \u0026quot;hero-section\u0026quot; class attribute */ background-image: url(\u0026quot;images/another-cool-background-image.gif\u0026quot;); }  "
},
{
	"uri": "/06-css-box-model/box-model-overview/border/",
	"title": "Border",
	"tags": [],
	"description": "",
	"content": " Border  Every box has a border, and by default it is invisible (0 pixels wide)\n Borders separates the edge of one box from another\n Border is expressed in three parts\n Border width: how thick the border will be\n Border style: solid, dashed, etc\n Border color: color of the border\n    /* border is most usually expressed using shorthand which allows you to specify a combination of the border 3 properties when using shorthand for border the order of the values does not matter */ /* style */ border: solid; /* width | style */ border: 2px dotted; /* style | color */ border: outset #f33; /* width | style | color */ border: medium dashed green; /* Border can be applied to individual sides of a box using border-top, border-bottom, border-left or border-right */ border-top: solid 1px blue; /* Also you can specify the border properties individually (this approach is not widely used) */ border-color: red; border-style: solid; border-width: 1px; border-top-color: blue; border-bottom-width: 3px;  JS Bin on jsbin.com\n"
},
{
	"uri": "/03-relative-paths/code-along-relative-paths/",
	"title": "Code Along - Relative Paths",
	"tags": [],
	"description": "",
	"content": " Code Along: Relative Paths  Using Atom, open the folder called relative_paths_exercise in your lesson_03_files folder. You will be using these files as starting off point.  Instructions  1) Add a link from the Homepage to the About page\n 2) Add a link from the About page to the Homepage\n 3) Add links from Homepage to index.html pages of the following sections:\n Mammals Birds Reptiles  4) Add links from the Homepage to the index.html pages of the following sections:\n Marsupials Placentals Monotremes  5) Add the associated images (from the provided image folder) to the index.html page of the following sections:\n Mammals Birds Reptiles  6) Add a link from the index.html pages of the Mammals, Reptiles and Birds section back to the Homepage\n 7) Add a link from the listing.html page of Monotremes back to the Homepage\n 8) Add a link from the listing.html page of the Marsupials section to the listing.html page of the Monotremes section\n 9) Add a link from the index.html page of the Placentals section to the index.html page of the Marsupials section\n 10) Add a link from the index.html page of the Marsupials section back to the homepage\n  "
},
{
	"uri": "/02-git-github/code-along-working-with-github/",
	"title": "Code Along: Working with Github",
	"tags": [],
	"description": "",
	"content": " During this exercise, we will be walking through the process of working with Git and Github.\nThe steps for submitting your assignments using Git \u0026amp; Github are detailed here\nSteps  1) Fork this US states repository located on Github.com\n 2) Clone the Repository using Github Desktop\n 3) Save the local copy of the repository in your FEWD/github folder\n 4) Open the project in Atom and fix the spelling errors found in index.html; save your work.\n 5) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Fixed spelling errors\u0026rdquo;\n 6) Push your changes to Github using Github Desktop\n 7) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 8) The states should be in alphabetical order. Go back to your project in Atom and ensure the state names are listed alphabetically. Save your work.\n 9) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Ordered state names alphabetically\u0026rdquo;.\n 10) Push your changes to Github using Github Desktop\n 11) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 12) Next you will be submitting your work comments, make Pull Request, the title of the pull request should be \u0026ldquo;Fixed issues spelling and order issues\u0026rdquo;\n 13) You just found out that you also need to add the 5 U.S. territories to the list (why didn\u0026rsquo;t these idiots tell me this the first time?? 😒 )\n Go back to your project in Atom and add the 5 U.S. territories. Save your work.\n 15) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added 5 U.S. territories\u0026rdquo;.\n 16) Push your changes to Github using Github Desktop\n 17) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 18) Observe, that you do not need to submit another Pull Request since your current Pull request is still \u0026ldquo;Open\u0026rdquo;.\n  Any commits pushed to a remote repository after a Pull Request has been made will be added to the existing Pull Request as long as it is still in an Open state\n "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/color-names/",
	"title": "Color Names",
	"tags": [],
	"description": "",
	"content": " Color Names  colors represented by predefined names 147 color names this approach is limited  h1 { color: green; }  "
},
{
	"uri": "/21-class-resources/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": "  Referencing documentation is a core task for developers.\n Documentation communicates how something (in our case programming languages, software libraries) works.\n Good documentation reduces implementation time and increases predictability of our software programs.\n  We will be referring to the following list of the documentation resources frequently throughout the course:\nHTML MDN\u0026rsquo;s HTML Reference\nCSS MDN\u0026rsquo;s CSS Reference\nJavascript MDN\u0026rsquo;s Javascript Reference\njQuery jQuery Documentation\n"
},
{
	"uri": "/02-git-github/",
	"title": "Git &amp; Github",
	"tags": [],
	"description": "",
	"content": " Lesson 02 Git \u0026amp; Github "
},
{
	"uri": "/final-projects/overview-requirements/",
	"title": "Overview &amp; Requirements",
	"tags": [],
	"description": "",
	"content": " Overview  Final Projects are a requirement of \u0026ldquo;course completion\u0026rdquo;\n Project should be something that you are passionate about\n We\u0026rsquo;ve established some milestones (and due dates) that will help you stay on track to complete your projects on time\n Each milestone will include a deliverable  Instruction team will actively work with you to help you manage scope and come up with a project plan\n Click here for examples of what other GA FEWD students have built\n  Requirements Your final projects must make use of the following:\n HTML\n CSS\n \u0026ldquo;some\u0026rdquo; javascript\n Good indentation\n Follow best practices for file/folder structure\n  "
},
{
	"uri": "/06-css-box-model/css-cascading-guidelines/specificity/",
	"title": "Specificity",
	"tags": [],
	"description": "",
	"content": " Specificity  If one selector is more specific than others, then the more specific rule takes precedent\n For example:\n h1 is more specific than * p.discount is more specific than p #city is more specific than img.town   Live Example\nJS Bin on jsbin.com\nIn the example above #featured is more specific than .box so the background-color of the element will be red even though .box is listed after #featured\n"
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/normal-flow/",
	"title": "Static Positioning",
	"tags": [],
	"description": "",
	"content": " Static Positioning (Normal Flow)  Default way browser handles block and inline elements\n Each block-level element sits on top of the next one\n Inline elements will share line/row with other inline elements (space permitting)\n If developers want to explicitly specify static positioning, they can do so using CSS:\n  .box { /* not necessary, as this is the default for all elements */ position: static; }  However, this is not necessary since all elements are statically positioned by default\nJS Bin on jsbin.com\n"
},
{
	"uri": "/05-css-selectors/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Classes and IDs\n CSS Selectors Overview \u0026amp; Examples\n Exercise: CSS Diner\n  "
},
{
	"uri": "/01-html-basics/tag-overview/",
	"title": "Tag Overview",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/04-css-basics/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Thinking in boxes\n What is CSS\n Adding CSS to your websites\n  "
},
{
	"uri": "/08-css-positioning-and-colors/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " CSS Colors\n CSS Positioning\n Background Images\n Lab: Fashion Blog - Pt 2\n  "
},
{
	"uri": "/homework-assignments/assignments/",
	"title": "Assignments",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/02-git-github/exercise-github-workflow/",
	"title": "Exercise: Working with Github",
	"tags": [],
	"description": "",
	"content": " Work together in pairs and follow the directions below.\nUse this Guide as reference\nSteps  1) Fork this repository located on Github.com\n 2) Clone the Repository using Github Desktop\n 3) Save the local copy of the repository in your FEWD/github folder\n 4) Open the project in Atom and and add the lyrics to Barney\u0026rsquo;s (you know the purple dinosaur) hit song \u0026ldquo;I Love You\u0026rdquo;. Save your work.\n 5) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added Barney lyrics\u0026rdquo;\n 6) Push your changes to Github using Github Desktop\n 7) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 8) Your client also wants an image of Barney to be added to the page. Find an image of Barney on the internet (family friendly please!) and updated your project in Atom.\n 9) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added Barney image\u0026rdquo;.\n 10) Push your changes to Github using Github Desktop\n 11) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 12) Next you will be submitting your work comments, make Pull Request, the title of the pull request should be \u0026ldquo;Completed barney website\u0026rdquo;\n 13) Your client also wants you to add the lyrics to the Barney Theme song.\n Go back to your project in Atom and add the lyrics to the Barney Theme song. Save your work\n 15) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added barney theme song lyrics\u0026rdquo;.\n 16) Push your changes to Github using Github Desktop\n 17) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 18) Observe, that you do not need to submit another Pull Request since your current Pull request is still \u0026ldquo;Open\u0026rdquo;.\n  Any commits pushed to a remote repository after a Pull Request has been made will be added to the existing Pull Request as long as it is still in an Open state\n "
},
{
	"uri": "/03-relative-paths/",
	"title": "Relative Paths",
	"tags": [],
	"description": "",
	"content": " Lesson 03 Relative Paths "
},
{
	"uri": "/06-css-box-model/css-cascading-guidelines/important/",
	"title": "!important",
	"tags": [],
	"description": "",
	"content": " !important  You can override all the above rules by adding a “!important” after any property\n This should be used sparingly; excessive use of !important can cause confusion within your codebase\n  // in css #thing { color: green; } // add the !important option at the end of your declaration; p { color: red !important; }  \u0026lt;!-- in html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p id=\u0026quot;thing\u0026quot;\u0026gt;Will be RED and NOT Green\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Here we used the !important option in CSS to override the Specificity guideline that would have had the rule with the selector of #thing take precedence under normal circumstances\nLive Example\nJS Bin on jsbin.com\nIn the example above, the background-color of the element is blue despite that fact that of the conflicting styles #featured is more specific than .box. This is because we used the !important flag on the background-color property inside of the .box style which will override normal cascading rules.\n"
},
{
	"uri": "/04-css-basics/thinking-in-boxes/",
	"title": "Thinking in Boxes",
	"tags": [],
	"description": "",
	"content": " Understanding the CSS Box Model is key to understanding how CSS works\n Going forward, you should view every element as a box (because that\u0026rsquo;s how browsers view them)\n   Block elements in the image are outlined in red, while inline elements are outlined in green\n Every element is a box, some boxes contain other boxes \u0026lt;body\u0026gt;, \u0026lt;div\u0026gt; or \u0026lt;article\u0026gt;\n CSS allows you to create rules the control each individual box\n Let\u0026rsquo;s take a look at how a live site looks when we view it in terms of it\u0026rsquo;s boxes\n  "
},
{
	"uri": "/04-css-basics/css-intro/",
	"title": "Intro to CSS",
	"tags": [],
	"description": "",
	"content": " What is CSS?  Stands for Cascading Style Sheet\n Allows you to control design of page\n With CSS allows you to create rules that specify how the content of an element should appear\n  p { color: gray; }  Applying the CSS rule above will result in text color of all \u0026lt;p\u0026gt; tags being changed to gray.\nAnatomy of a CSS Rule  CSS works by associating rules with HTML elements.\n These rules govern how the content of specified elements should be displayed\n CSS Rules are made up of two parts: a selector and a declaration\n Selectors\n indicate which element the rule applies to  Declarations\n indicate how the elements referred to in the selector should be styled split into two parts (a property and a value), and are separated by a colon     p { color: black; } h1, h2, h3 { font-family: Gill Sans Extrabold, sans-serif; color: #191919; }  "
},
{
	"uri": "/04-css-basics/",
	"title": "CSS Basics",
	"tags": [],
	"description": "",
	"content": " Lesson 04 CSS Basics "
},
{
	"uri": "/04-css-basics/adding-css/",
	"title": "Adding CSS to your website",
	"tags": [],
	"description": "",
	"content": " There are three ways to add css to your site  1) Inline (avoid!)\n 2) Internal css using \u0026lt;style\u0026gt; tag (avoid!)\n 3) External file (best practice)\n  Inline CSS (avoid!)  This method involves adding styles directly to html elements using a style attribute   \u0026lt;body style=\u0026quot;background-color: orange;\u0026quot;\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt;  Internal CSS (avoid!)  This method involves adding styles directly to html elements using a \u0026lt;style\u0026gt; tag  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;style type=\u0026quot;text/css\u0026quot;\u0026gt; body { font-family: Arial; background-color: rgb(185, 179, 175); } h1 { color: rgb(255, 255, 255); } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Add CSS using an external stylesheet (Best Practice)  The use of external CSS stylesheets allows you to place all of your styles in a central location, any site-wide changes can be made in a single place\n A \u0026lt;link\u0026gt; tag must be used to connect a stylesheet to an html file\n  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;css/styles.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  //in css/styles.css body { font-family: Arial, sans-serif, serif; padding: 10px; } p { font-size: 14px; color: #333333; }  \u0026lt;link\u0026gt; Tag  Link tag is used to specify the relationship between an html file and an external file\n Here are some commonly used attributes for the \u0026lt;link\u0026gt; tag\n href: specifies the path to the external file\n rel: specifies the relationship between the HTML page and the file it is linked to. The value of this attribute should be stylesheet when linking to a CSS file\n type: specifies the type of document being linked to. This value should be \u0026ldquo;text/css\u0026rdquo;\n   The rel attribute is required when linking to css stylesheet\n"
},
{
	"uri": "/05-css-selectors/classes-and-ids/",
	"title": "Classes and Ids",
	"tags": [],
	"description": "",
	"content": " Classes and Ids  Both are just HTML attributes\n Should start with a letter or underscore\n Can be applied to any html element\n Important: Use of the class or id attribute by itself does not change the appearance of an element; CSS/Javascript must be involved\n  Class Attribute  Is used to group elements together, therefore establishing them as different from other elements on the page\n Element can share the same class attribute values (this could be applied to another type of element)\n   \u0026lt;!-- in html --\u0026gt; \u0026lt;p class='important'\u0026gt; Awesome content \u0026lt;/p\u0026gt;   // in css, use a period to specify a class selector in css .important { font-weight: bold; }  In css class selectors are specified using a . (period)\n Id Attribute  Used to uniquely identify elements on a page\n No two elements should have the same id value (otherwise it would not be unique)\n   \u0026lt;!-- in html --\u0026gt; \u0026lt;button id='add-task'\u0026gt; Add Task \u0026lt;/button\u0026gt;   // in css a '#' (hash) is used to specify an id selector #add-task { font-size: 12px; }  In css id selectors are specified using a # (hash)\n Naming classes and ids  Developers can choose any name they want for classes and ids, however the names you choose should be descriptive  When should you use classes instead of ids (or vice versa)?  Use classes if applying a general style to more than one element on the same page\n Use ids when you style element differently from any other instance of the same element\n Use ids when using javascript to precisely target elements\n  "
},
{
	"uri": "/06-css-box-model/css-cascading-guidelines/inheritance/",
	"title": "Inheritance",
	"tags": [],
	"description": "",
	"content": " Inheritance  Certain CSS properties such as font-family, font-size, color will be inherited by child properties\n However, properties such as background color or border properties are not inherited\n Click here to see a full list inherited and non-inherited CSS properties\n  Live Example\nJS Bin on jsbin.com\nIn the example, the p element will automatically inherit the font color property from its ancestor (body) since color is a css property that can be inherited. These inherited styles can easily be overridden if you create css rules that are more specific that change the same property. This was done in the style for p.main where we specified a color property instead of inheriting it from the body element.\n"
},
{
	"uri": "/course-materials/lesson-files/",
	"title": "Lesson Files",
	"tags": [],
	"description": "",
	"content": " Lesson Files  Lesson 00 files (Course Intro \u0026amp; Tools) : No files needed\n Lesson 01 files (HTML Basics)\n Lesson 02 files (Git/Github): No files needed\n Lesson 03 files (Relative Paths)\n Lesson 04 files (CSS Basics)\n Lesson 05 files (CSS Selectors): No files needed\n Lesson 06 files (CSS Box Model)\n Lesson 07 files (Page Layout with Flexbox)\n Lesson 08 files (CSS Positioning, Colors \u0026amp; Background Images)\n  "
},
{
	"uri": "/01-html-basics/tag-overview/body-head-title/",
	"title": "Body, Head &amp; Title",
	"tags": [],
	"description": "",
	"content": " \u0026lt;html\u0026gt;, \u0026lt;body\u0026gt;, \u0026lt;head\u0026gt;, \u0026lt;title\u0026gt; The following tags make up the structure of all web pages\n \u0026lt;html\u0026gt;\n Represents the root (top-level element) of an HTML document, so it is also referred to as the root element\n All other elements must be descendants of this element.\n  \u0026lt;body\u0026gt;\n Everything inside the body tag is shown inside the browser window  \u0026lt;head\u0026gt;\n Contains information about the page (vs shown on the pages\n Title and Links to other files are usually specified in the head element\n  \u0026lt;title\u0026gt;\n Text here is displayed in the top of the browser (or on the tab in Chrome or other browsers that use tabs)   \u0026lt;title\u0026gt; is just one of many tags that can be placed inside of \u0026lt;head\u0026gt;, we\u0026rsquo;ll see more of them as we go through the class, for more information click here\n Example\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- contains information about the page --\u0026gt; \u0026lt;title\u0026gt; Title of the page \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Main Heading\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Some cool content\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  what is the DOCTYPE? There have been several versions of HTML and because of this each web page should begin with a DOCTYPE declaration to tell a browser which version of HTML the page is using (browsers will still usually display the page even if it is not included).\n "
},
{
	"uri": "/21-class-resources/keyboard-shortcuts/",
	"title": "Keyboard Shortcuts",
	"tags": [],
	"description": "",
	"content": " General Window Management \u0026amp; Browser Shortcuts    Action Mac Windows     Open Chrome Developer Tools cmd+option + i F2 or ctrl + shift + i   Refresh page cmd + R ctrl + R   Switch between applications cmd + tab alt + tab   Switch between windows in the same application cmd + ~     Atom Shortcuts Files, Windows, Tabs Management    Command macOS Windows Linux Description     Open Settings Menu cmd+, ctrl+, ctrl+, Opens the Atom\u0026rsquo;s settings menu   Open File (Fuzzy) cmd+p or cmd+t ctrl+p or ctrl+t ctrl+p or ctrl+t Opens the Fuzzy Finder   Browse Open Files cmd+b ctrl+b ctrl+b Browse tabs within the window   Previous Tab alt+cmd+left ctrl+pageup ctrl+pageup Cycles left through open tabs (in the active pane)   Next Tab alt+cmd+right ctrl+pagedown ctrl+pagedown Cycles right through open tabs (in the active page)   Toggle Tree View cmd+\\ ctrl+\\ ctrl+\\ Toggles Atom\u0026rsquo;s file Tree View   Show Available Snippets alt+shift+s alt+shift+s alt+shift+s Shows the snippets available to Atom   Save cmd+s ctrl+s ctrl+s Saves the currently active file   Save As shift+cmd+s ctrl+shift+s ctrl+shift+s Saves the currently active file under a different name   Save All alt+cmd+s   Saves all changed files   Close Tab cmd+w ctrl+w ctrl+w Closes the currently active tab   Close Window shift+cmd+w ctrl+shift+w ctrl+shift+w Closes the currently active editor window   Split Window cmd+k up/down/left/right ctrl+k up/down/left/right ctrl+k up/down/left/right Split the currently active tab in one of the four directions   Focus Pane cmd+k cmd+up/down/left/right ctrl+k ctrl+up/down/left/right ctrl+k ctrl+up/down/left/right Move the focus to the pane in one of the four directions   Toggle full screen ctrl+cmd+f F11 F11 Toggle full screen window    Editing    Command macOS Windows Linux Description     Duplicate Lines shift+cmd+d ctrl+shift+d ctrl+shift+d Duplicates the line of the current cursor position and creates a new line under it with the same contents   Delete Line ctrl+shift+k ctrl+shift+k ctrl+shift+k Deletes the current line   Move Line Up ctrl+cmd+up ctrl+up ctrl+up Moves the contents of the current cursor position up one line. If there is a line above with content, the current lines content will swap with the one above it.   Move Line Down ctrl+cmd+down ctrl+down ctrl+down Moves the contents of the current cursor position down one line. If there is a line below with content, the line\u0026rsquo;s content will swap with the one below it.   Find/Replace cmd+f ctrl+f ctrl+f Opens up the Find/Replace panel   Find Next cmd+g F3 F3 Toggles forward through the results of the current buffer in the file while the Find/Replace panel is active   Find Previous shift+cmd+g shift+F3 shift+F3 Toggles backward through the results of the current buffer in the file while the Find/Replace panel is active   Find in Project shift+cmd+f ctrl+shift+f ctrl+shift+f Opens the Find in Project Panel   Go To Line ctrl+g ctrl+g ctrl+g Opens the Go To Line panel   Go To Matching Bracket ctrl+m ctrl+m ctrl+m The cursor goes to the matching top bracket that the cursor is ecapsulated in   Select Line cmd+l ctrl+l ctrl+l Selects the entire line the cursor\u0026rsquo;s current position is in   Toggle Comment cmd+/ ctrl+/ ctrl+/ Toggles the selected text into a comment of the current grammar   Column Selection ctrl+shift+up/down ctrl+alt+up/down shift+alt+up/down Allows to select multiple rows, where the same edit will be applied   Select Same Words cmd+d ctrl+d ctrl+d If you select a word, and then hit the key combo for this command, Atom will select the next same word for you. Then you can either type directly (which will replace the old words) or use left or right arrow to append things.   Undo Selection cmd+u ctrl+u ctrl+u This undoes the previous selection, like from Select Same Words.   Select All The Same Words At Once cmd+ctrl+g alt+f3 alt+f3 This shortcut is similar to cmd+d/ctrl+d but it selects all the matching words at once.    "
},
{
	"uri": "/00-course-intro-and-tools/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Understand what the term \u0026ldquo;front-end Development\u0026rdquo; means\n Introduce tools you will be using throughout the class\n Cover class logistics, structure \u0026amp; keys to success\n  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/align-self/",
	"title": "Align Self",
	"tags": [],
	"description": "",
	"content": " align-self  allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.   .item { align-self: auto | flex-start | flex-end | center | baseline | stretch; } --- Live Example  JS Bin on jsbin.com\n"
},
{
	"uri": "/08-css-positioning-and-colors/background-images/background-repeat/",
	"title": "Background Repeat",
	"tags": [],
	"description": "",
	"content": " background-repeat Property  background-repeat allows you to control how an background image is repeated\n repeat: image is repeated both horizontally and vertically (default behavior)\n repeat-x: image is only repeated horizontally\n repeat-y: image is only repeated vertically\n no-repeat: image is only shown once and not repeated\n   "
},
{
	"uri": "/07-page-layout-flexbox/containing-elements/",
	"title": "Containing Elements",
	"tags": [],
	"description": "",
	"content": " Containing Elements  Elements that contain groups of elements\n For example, grouping all of the elements associated with the header in a \u0026lt;div\u0026gt;\n \u0026lt;div\u0026gt; tags are commonly used as containing elements\n  In example the above example, orange lines represent \u0026lt;div\u0026gt; tags\n\u0026lt;div\u0026gt;  Used to group a set of elements together in one block-level box\n \u0026lt;div\u0026gt; element are block-level elements which means they will start on a new line\n  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;css/styles.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- start of header div --\u0026gt; \u0026lt;div id=\u0026quot;header\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;images/logo.gif\u0026quot; alt=\u0026quot;Anish Kapoor\u0026quot; /\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;index.html\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;biography.html\u0026quot;\u0026gt;Biography\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;works.html\u0026quot;\u0026gt;Works\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;contact.html\u0026quot;\u0026gt;Contact\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- end of header div --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Structure using \u0026lt;div\u0026gt;s  Prior to HTML5, the divs have been the most common way to structure content on page\n Usual ids/classes are used to provide each div with context regarding the type of content div contains\n Above picture is just an example! This structure is not set in stone, use what makes sense for your project\n  \u0026lt;div\u0026gt;s are used to structure pages in logical sections/groups based on your site\u0026rsquo;s layout\n "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/display/",
	"title": "Display",
	"tags": [],
	"description": "",
	"content": " display  Defines a flex container\n inline or block depending on the given value\n  .container { display: flex; /* or inline-flex */ }  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/",
	"title": "Flex Container Properties",
	"tags": [],
	"description": "",
	"content": " The upcoming (and awesome) gifs were graciously borrowed from this insightful blog post that covers flexbox\n Flex Container Properties  display\n flex-direction\n flex-wrap\n flex-flow shorthand\n justify-content\n align-items\n align-content\n  "
},
{
	"uri": "/homework-assignments/assignments/hw-01-online-travel-guide/",
	"title": "HW #1 - Online Travel Guide",
	"tags": [],
	"description": "",
	"content": " Homework #1: Online Travel Guide Create an online travel guide for a travel destination of your choice\nPlease refer to the Homework Submission Github Workflow guide for detailed instructions for starting, completing and submitting Homework Assignments\n Directions:  Review the assignment here\n Fork the following repository: fewd20190318/hw-01-online-travel-guide\n Clone the assignment repository down to your computer\n Work on your assignment and regularly commit your work\n Submit your assignment using a Pull Request\n  "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/hex-codes/",
	"title": "Hex codes",
	"tags": [],
	"description": "",
	"content": " Hex Codes  colors represented by values for red, green and blue in hexadecimal code  h1 { color: #66cdaa; }  "
},
{
	"uri": "/final-projects/milestones-due-dates/",
	"title": "Milestones &amp; Due Dates",
	"tags": [],
	"description": "",
	"content": " Throughout the course you will be providing deliverables that will help keep your final projects on track to be completed on time.\nMilestones    Milestone Due Date     Submit three (3) of project ideas Mon, Apr 15th   Get your project idea approved Mon, Apr 22nd   Create github repository for your final project Wed, Apr 24th   Create and submit wireframes Mon, Apr 29th   Provide a project plan for your final project Mon, Apr 29th   Host your project on Github pages Mon, May 13th   Submit your final project Mon, May 20th    "
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/relative-positioning/",
	"title": "Relative Positioning",
	"tags": [],
	"description": "",
	"content": " Relative Positioning  Moves element in relation to where it would have been in normal flow\n Uses offset properties (top or bottom and left or right) to indicate how far to move the element from where it would have been in normal flow\n Usually accompanied by box offsets: top, right, bottom, left.\n It will not effect the other elements on the page, surrounding elements stay in the position in their normal flow positions\n  If you set position: relative; on an element but no offset attributes (top, left, bottom or right), it will have no effect on it\u0026rsquo;s positioning at all, it will be exactly as it would be if you left it as position: static; But if you DO give it some other positioning attribute, say, top: 10px;, it will shift it\u0026rsquo;s position 10 pixels DOWN from where it would NORMALLY be\n Live Example\nJS Bin on jsbin.com\n"
},
{
	"uri": "/final-projects/milestones-due-dates/submit-project-ideas/",
	"title": "Submit Project Ideas",
	"tags": [],
	"description": "",
	"content": " Milestone I: Submit Project Ideas  Submit three (3) ideas for your final project\n Deliverable: Use this form to submit your final project ideas\n Due Date: Monday, April 15th\n After which, I\u0026rsquo;ll schedule some time to meet with you to discuss your ideas\n  "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/",
	"title": "CSS Colors",
	"tags": [],
	"description": "",
	"content": " Specifying Colors in CSS Several ways to express colors in CSS\n Color Names Hex Codes RGB RGBa HSL HSLa  "
},
{
	"uri": "/05-css-selectors/",
	"title": "CSS Selectors",
	"tags": [],
	"description": "",
	"content": " Lesson 05 CSS Selectors "
},
{
	"uri": "/05-css-selectors/css-selectors/",
	"title": "CSS Selectors",
	"tags": [],
	"description": "",
	"content": " CSS Selectors Overview  Many different types of selectors that allow you to target rules to specific elements in an HTML document\n Selectors are case sensitive, must match element names and attributes exactly\n     Selector Meaning Example     Universal Selector Applies to all elements *{}   Type Selector Match elements names h1, h2, h3 {}   Class Selector Matches all elements with a class attribute value matching on specified after a period (.) .hint {}, p.hint {}   ID Selector Matches all elements with a id attribute value matching on specified after a hash (#) #offer {}   Child Selector Matches elements that are a direct child of another li \u0026gt; a {}   Descendant Selector Matches element that is a direct descendant of another (not just the child) p a {}   Adjacent Sibling Selector Matches first element that is a sibling of another h1+p {}   General Sibling Selector Matches all elements that is a sibling of another h1~p {}   Attribute Selector Attribute selectors select an element using the presence of a given attribute or attribute value input[type=\u0026quot;email\u0026quot;] {}   Pseudo Class Selector Selector that specifies a special state of the selected element(s) a:visited   Pseudo Element Selector Selector that lets you style a specific part of the selected element(s) p::first-line    A complete list of all CSS Selectors can be found here\n "
},
{
	"uri": "/05-css-selectors/css-selectors-examples/",
	"title": "CSS Selectors Examples",
	"tags": [],
	"description": "",
	"content": " CSS Selectors Examples Class Selector JS Bin on jsbin.com\nID Selector JS Bin on jsbin.com\nChild Selector JS Bin on jsbin.com\nDescendent Selector Descendant Selector Example on jsbin.com\nAdjacent Sibling Selector Adjacent Sibling Selector example on jsbin.com\nGeneral Sibling Selector General Sibling Selector Example on jsbin.com\nPseudo Class Selector JS Bin on jsbin.com\nPseudo Element Selector JS Bin on jsbin.com\n"
},
{
	"uri": "/06-css-box-model/",
	"title": "CSS Box Model",
	"tags": [],
	"description": "",
	"content": " Lesson 06 CSS Box Model "
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/",
	"title": "CSS Positioning",
	"tags": [],
	"description": "",
	"content": " CSS Positioning Positioning allows you to take elements out of the normal document layout flow, and make them behave differently; for example sitting on top of one another, or always remaining in the same place inside the browser viewport\nWe\u0026rsquo;ll discuss the following positioning types:\n Normal Flow Relative Positioning Absolute Positioning Fixed Positioning  "
},
{
	"uri": "/04-css-basics/code-along/",
	"title": "Code Along - About Me",
	"tags": [],
	"description": "",
	"content": " Code Along: Building an \u0026ldquo;About Me\u0026rdquo; page  As a class, we\u0026rsquo;ll walk through using html and css to build the \u0026ldquo;About Me\u0026rdquo; page depicted in the image below   Using Atom, open the folder called rocket_raccoon_about_me in your lesson_04_files folder. You will be using these files as starting off point.\n When building websites it is a best practice to have a plan in place before starting out. One popular planning tool is called a wireframe.\n Wireframes are low fidelity drawings that help you visualize the layout of your pages. We\u0026rsquo;ll talk about wireframes more in depth throughout the course.\n For this exercise we\u0026rsquo;ll be using the wireframe below to help guide is build out the About Me page:\n  "
},
{
	"uri": "/01-html-basics/code-along/",
	"title": "Code Along - GA Press Release",
	"tags": [],
	"description": "",
	"content": " Code Along: GA Press Release  As a class, we\u0026rsquo;ll walk through using html to build out an html version of a press release\n Using Sublime, open the folder called ga_press_release (found within the starter_code) folder\n  "
},
{
	"uri": "/04-css-basics/lab/",
	"title": "Lab - Portfolio page",
	"tags": [],
	"description": "",
	"content": " Lab: Start/Complete Portfolio Page  Individually or in teams to finish the fictional developer\u0026rsquo;s site by building out their portfolio page (depicted in the image below)\n You will be adding a Portfolio page to your existing rocket_raccoon_about_me project\n Timebox: 35 mins\n Before you start building: Draw a wireframe of the layout to help you plan your approach\n The \u0026ldquo;About Me\u0026rdquo; and \u0026ldquo;Porfolio\u0026rdquo; pages should be linked using a relative url\n  "
},
{
	"uri": "/06-css-box-model/box-model-overview/",
	"title": "CSS Box Model",
	"tags": [],
	"description": "",
	"content": " CSS Box Model  Understanding the CSS Box Model is key to understanding how CSS works\n Going forward, you should view every element as a box (because that\u0026rsquo;s how browsers view them)\n   Block elements in the image are outlined in red, while inline elements are outlined in green\n Every element is a box, some boxes contain other boxes \u0026lt;body\u0026gt;, \u0026lt;div\u0026gt; or \u0026lt;article\u0026gt;\n CSS allows you to create rules the control each individual box\n   tags are examples of block elements-- , , , -- Box Model consists of:  Margin\n Padding\n Border\n  "
},
{
	"uri": "/05-css-selectors/exercise-css-diner/",
	"title": "Exercise - CSS Diner",
	"tags": [],
	"description": "",
	"content": " Exercise: CSS Diner During this exercise, you\u0026rsquo;ll go through an interactive tutorial focused on learning the different CSS Selectors\n Complete the interactive tutorial found here\n Timebox: 25 mins\n  "
},
{
	"uri": "/01-html-basics/lab/",
	"title": "Lab - Cookie Recipe",
	"tags": [],
	"description": "",
	"content": " Lab: Cookie Recipe  Work individually or in teams to create an html version of a Cookie recipe depicted in the images below\n Using Atom, open the folder called cookie_recipe in your lesson_01_files folder. You will be using these files as starting off point.\n Tips\n Focus on the content first, then the image then the CSS There will be some items that you will need to look up, CSS is one of them (don\u0026rsquo;t worry we will be going over this in the next class, but part of being a developer is being able to google your way to solutions)   "
},
{
	"uri": "/07-page-layout-flexbox/",
	"title": "Page Layout with Flexbox",
	"tags": [],
	"description": "",
	"content": " Lesson 07 Page Layout with Flexbox "
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/absolute-positioning/",
	"title": "Absolute Positioning",
	"tags": [],
	"description": "",
	"content": " Absolute Positioning  This type of positioning takes box out of normal flow\n Other elements act as if the absolutely positioned element is not longer there\n Box offset properties (top or bottom and left or right) are used to position the element\n Elements positioned absolutely will be positioned relative to the nearest positioned parent element\n  Remember that these values will be relative to the next parent element with relative (or absolute) positioning. If there is no such parent, it will default all the way back up to the  element itself meaning it will be placed relatively to the page itself.\n Live Example - Containing element is \u0026ldquo;positioned\u0026rdquo;\nJS Bin on jsbin.com\nIn the example above, the containing element (box with blue border) is considered positioned because it has the following style applied to it: position: relative. This means that the absolutely positioned box (red box) will be absolutely positioned relative to the bounds of the containing element (box with blue border)\nAnother Live Example - Containing element is NOT \u0026ldquo;positioned\u0026rdquo;\nJS Bin on jsbin.com\nIn the example above, the containing element (box with blue border) is NOT positioned because it does not have a position property set (we commented. When this is the case, the absolutely positioned box (red box) will be absolutely positioned relative to the bounds of the entire page (or the screen). This is why the red box is no longer bounder to the containing element (box with blue border).\n"
},
{
	"uri": "/08-css-positioning-and-colors/background-images/",
	"title": "Background Images",
	"tags": [],
	"description": "",
	"content": "Properties of Background of Image\n background-image Property background-repeat Property background-position Property  "
},
{
	"uri": "/08-css-positioning-and-colors/background-images/background-position/",
	"title": "Background Position",
	"tags": [],
	"description": "",
	"content": " background-position Property  Used to position an image when it is not being repeated\n This property has two values\n horizontal position\n vertical position\n   body { /* this image will be applied to the entire page */ background-image: url(\u0026quot;images/cool-background-image.gif\u0026quot;); background-repeat: no-repeat; background-position: center top; }   If you only specify one value, the second value will default to center\n You can also you pixels or percentages\n They will represent the distance from teh top left corner of the window (or the containing box) top left corner is 0% 0%\n  "
},
{
	"uri": "/06-css-box-model/code-along-tags-and-boxes/",
	"title": "Code Along - Tags and Boxes",
	"tags": [],
	"description": "",
	"content": " Code Along: Tags \u0026amp; Boxes  Using Atom, open the folder called tags_boxes in your lesson_06_files folder. You will be using these files as starting off point.\n As a class, we\u0026rsquo;ll walk through seeing examples of the box model in action\n  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/flex-direction/",
	"title": "Flex Direction",
	"tags": [],
	"description": "",
	"content": " flex direction  Establishes the main-axis and defines the direction flex items are placed in the flex container\n Determines whether the flex items are layed out as either horizontal rows or vertical columns\n  .container { flex-direction: row | row-reverse | column | column-reverse; }  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/",
	"title": "Flex Items Properties",
	"tags": [],
	"description": "",
	"content": " Flex Item Properties  align-self\n order\n flex-wrap\n flex-basis\n flex-grow\n flex-shrink\n flex shorthand\n  "
},
{
	"uri": "/final-projects/milestones-due-dates/get-idea-approved/",
	"title": "Get Idea Approved",
	"tags": [],
	"description": "",
	"content": " Milestone II: Get Final Project Idea Approved Details TBD\n Due Date: Monday, April 22nd  "
},
{
	"uri": "/homework-assignments/assignments/hw-02-relaxr-project/",
	"title": "HW #2 - Relaxr Project",
	"tags": [],
	"description": "",
	"content": " Homework #2: Relaxr Project Create a landing page and blog for an up and coming startup client.\nPlease refer to the Homework Submission Github Workflow guide for detailed instructions for starting, completing and submitting Homework Assignments\n Directions:  Review the assignment here\n Fork the following repository: fewd20190318/hw-02-relaxr-project\n Clone the assignment repository down to your computer\n Work on your assignment and regularly commit your work\n Submit your assignment using a Pull Request\n  "
},
{
	"uri": "/08-css-positioning-and-colors/lab-fashion-blog-2/",
	"title": "Lab - Fashion Blog II",
	"tags": [],
	"description": "",
	"content": " Lab: Fashion Blog II  Using Atom, open the folder called fashion_blog_part_II in your lesson_08_files folder. You will be using these files as starting off point.\n Work in teams to update the layout for the fashion blog site, the end result of your update should closely resemble the image below:\n We have provided you with a finished version of Fashion Blog part I, please use these files for the lab\n   Before you start building:\n Draw a wireframe of the layout Identify your flex containers Idenitfy your nested flex containers  Timebox: 35 mins\n  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/order/",
	"title": "Order",
	"tags": [],
	"description": "",
	"content": " Controls the order in which flex-items appear in the flex container\n Lower values are listed first (-1 will be listed before 2)\n If no order is set on a flex-item it will have a default value of 0\n   .item { order: \u0026lt;integer\u0026gt;; }  Live Example\nJS Bin on jsbin.com\nIn the example above we are applying order: -1 to the red box (.three) which results in it being listed first among the other flex-items even though in our html it was listed last.\n"
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/rgb/",
	"title": "RGB",
	"tags": [],
	"description": "",
	"content": " RGB  colors represented by values for red, green and blue expressed as numbers between 0 and 255  h1 { color: rgb(102, 205, 170); }  "
},
{
	"uri": "/21-class-resources/atom-editor-settings/",
	"title": "Recommended Atom Editor Settings",
	"tags": [],
	"description": "",
	"content": " All of the settings below can be accessed using the following steps:\n Mac: cmd + , -\u0026gt; Editor PC: ctrl + , -\u0026gt; Editor  Setting indentation levels / default tab-size During our course we will be using a set indentation level of 2 spaces (1 indentation level = 2 spaces). Atom makes it easy conform to this approach by setting our tab to a set level of indentation.\nAfter updating this setting, pressing the tab key will represent one level of indentation which will translate to 2 spaces.\nDisplaying indentation guides Displaying the indentation guide provides a visual way of helping you ensure your indentation levels are correct\nSetting wordwrap Wordwrap ensures that long lines in your code are automatically wrapped to the next line. This improves readability of your code.\n"
},
{
	"uri": "/07-page-layout-flexbox/semantic-elements/",
	"title": "Semantic Elements",
	"tags": [],
	"description": "",
	"content": " Structure using Semantic tags  Similar to \u0026lt;div\u0026gt;s, semantic tags are container elements\n HTML5 introduced semantic tags that directly communicate type of content the container element contains\n Important note: incorrect use of the tags will not result in any errors (but may be confusing for your teammates)\n There are rougly 100 semantic elements\n Above picture is just an example! This structure is not set in stone, use what makes sense for your project\n  Make sure you distinguish between \u0026lt;head\u0026gt; and \u0026lt;header\u0026gt;, they are not the same\n Benefits of Using Semantic Elements  Search engines will consider its contents as important keywords to influence the page\u0026rsquo;s search rankings (see SEO)\n Screen readers can use it as a signpost to help visually impaired users navigate a page\n Finding blocks of meaningful code is significantly easier than searching though endless divs with or without semantic or namespaced classes\n Suggests to the developer the type of data that will be populated Semantic naming mirrors proper custom element/component naming\n  This blog post does a good job describing Semantic Elements.\n "
},
{
	"uri": "/06-css-box-model/code-along-notifications/",
	"title": "Code Along - Notifications",
	"tags": [],
	"description": "",
	"content": " Code Along: Notifications  Using Atom, open the folder called notifications in your lesson_06_files folder. You will be using these files as starting off point.\n As a class, we\u0026rsquo;ll see examples of using classes and ids to style notifications that are often used to provide contextual information to users within an application\n  "
},
{
	"uri": "/08-css-positioning-and-colors/",
	"title": "CSS Positioning, Colors, Background Images",
	"tags": [],
	"description": "",
	"content": " Lesson 08 CSS Positioning, Colors \u0026amp; Background Images "
},
{
	"uri": "/09-intro-to-programming/",
	"title": "Intro to Programming",
	"tags": [],
	"description": "",
	"content": " Lesson 09 Intro to Programming "
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/z-index/",
	"title": "z-index",
	"tags": [],
	"description": "",
	"content": " Z-index  If boxes do overlap, the elements that appear later in the HTML code sit on top of those that are earlier in the page\n Z-index allows you to control which elements appear on top when elements overlap\n  .positioned { position: absolute; top: 30; left: 50; z-index: 10; }   z-index property accepts a number, the higher the number, the closer that element will be to the front  Live Example\nJS Bin on jsbin.com\n"
},
{
	"uri": "/10-intro-to-jquery/",
	"title": "Intro to jQuery",
	"tags": [],
	"description": "",
	"content": " Lesson 10 Intro to jQuery "
},
{
	"uri": "/course-materials/solutions/",
	"title": "Solutions",
	"tags": [],
	"description": "",
	"content": " Solutions Disclaimer: These files are not meant to be viewed as the \u0026ldquo;right answer, instead view them as a way to learn how another developer approached the same problem.\n Lesson 01: HTML Basics  GA Press Release Solution Cookie Receipe Solution  Lesson 03: Relative Paths  Relative Paths Exercise Solution  Lesson 04: CSS Basics  Rocket Raccoon About Me Solution  Lesson 06: CSS Box Model  Fashion Blog Solution  Lesson 07: Page Layout with Flexbox  Layout Challenge Solution  "
},
{
	"uri": "/01-html-basics/tag-overview/text/",
	"title": "Text",
	"tags": [],
	"description": "",
	"content": " HTML Headings  Six (6) levels of headings h1 tags is used for main headings h2 tags are used for subheadings Remaining level headings used as needed based on your content hierarchy  Browsers display headings differently, but relative sizes will always be consistent (by default) - i.e. h1 will always be bigger than h2\n JS Bin on jsbin.com\nParagraphs  Use \u0026lt;p\u0026gt; element to display paragraphs\n By default, browser displays each paragraph on a new line\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/08-css-positioning-and-colors/background-images/background-image-examples/",
	"title": "Background Image Examples",
	"tags": [],
	"description": "",
	"content": " Background Image examples  Using Atom, open the folder called background_image_examples in your lesson_08_files\n We walk through live examples of background image in action\n  "
},
{
	"uri": "/final-projects/milestones-due-dates/create-github-repository-for-final-project/",
	"title": "Create Github Repository for Final Project",
	"tags": [],
	"description": "",
	"content": " Milestone III: Create Github Repository for Final Project Details TBD\n Due Date: Wednesday, April 24th  Do not include spaces in your github repository names\n - **Deliverable**: Submit a link to your github repo here -- "
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/fixed-positioning/",
	"title": "Fixed Positioning",
	"tags": [],
	"description": "",
	"content": " Fixed Positioning  Positions the element in relation to the browser window (not its containing element)\n Fixed positioned element stays in place even if user scrolls down the page\n Box offset properties (top or bottom and left or right) specify where the element should appear in relation to browser window\n Fixed positioning commonly used to create a fixed navbar\n  .navbar { position: fixed; }  A fixed position element is positioned relative to the viewport, or the browser window itself. The viewport doesn\u0026rsquo;t change when the window is scrolled.\n Live Example\nFixed Positioning Example on jsbin.com\nThe div.navbar element above is set to position: fixed and will be positioned relative to the viewport (screen). Because fixed positioned elements stay in place, you can create a persisted (or fixed) navigation containing element as seen in the example above.\n"
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/flex-basis/",
	"title": "Flex Basis",
	"tags": [],
	"description": "",
	"content": " flex-basis  Controls the initial size of an element, before it is manipulated by other Flexbox properties\n It can be a length (e.g. pixels, percentages, etc) or auto\n Values for flex-basis will take precedent over the values of width or height (in the case of flex-direction: column)\n  .item { flex-basis: \u0026lt;length\u0026gt; | auto; /* default auto */ }  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/flex-wrap/",
	"title": "Flex Wrap",
	"tags": [],
	"description": "",
	"content": " flex-wrap allows developers to change that and allow the items to wrap as needed with this property  By default, flex items will all try to fit onto one line\n .container { flex-wrap: nowrap | wrap | wrap-reverse; }  Live Example\nJS Bin on jsbin.com\n"
},
{
	"uri": "/07-page-layout-flexbox/flexbox/",
	"title": "Flexbox",
	"tags": [],
	"description": "",
	"content": " What is Flexbox?  New layout mode introduced with CSS3\n Allows developers to create flexible layouts without having to rely on floats or inline-block elements\n Is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based)\n Widely supported across all modern browsers\n  See the full list of layout modes here\n What problems does Flexbox solve?  Vertically centering a block of content inside its parent\n Making all the children of a container take up an equal amount of the available width/height, regardless of how much width/height is available\n Making all columns in a multiple column layout adopt the same height even if they contain a different amount of content\n  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flexbox-tips/",
	"title": "Flexbox Tips",
	"tags": [],
	"description": "",
	"content": " Flexbox Tips  Use wireframes to plan out all of your flex containers\n Identify which flex containers will have a row direction and which will have a column direction?\n Identify where you will have nested flex containers (i.e. containers in containers)\n  Keep is simple, use divs for all of your flex containers\n Technically any element can be used as a flex  Use classes to name your flex containers\n Use a consistent naming convention to identify your flexbox container classes\n For example, in this class we will have all flex container class names end with \u0026ldquo;-container\u0026rdquo; for example (.main-container) to easily help you distinguish between containers and other elements.\n  Use the \u0026ldquo;guideline\u0026rdquo; css style (provided at the top of your css files) to help you visually identify your containers\n Take small steps, constantly check the results of each change in your browser (i.e. do not add a bunch of styles and then only periodically check the results in the browser - this is a sure way to get lost)\n  "
},
{
	"uri": "/06-css-box-model/lab-fashion-blog/",
	"title": "Lab - Fashion Blog",
	"tags": [],
	"description": "",
	"content": " Lab: Fashion Blog  Work in teams to finish the fictional developer\u0026rsquo;s site by building out their portfolio page (depicted in the image below)\n Timebox: 40 mins\n   Using Atom, open the folder called fashion_blog in your lesson_06_files folder. You will be using these files as starting off point.\n Before you start building: Draw a wireframe of the layout to help you plan your approach\n  "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/rgba/",
	"title": "RGBa",
	"tags": [],
	"description": "",
	"content": " RGBa  Leverages CSS3 inclusion of the opacity property Just like RGB but allows you to specify the opacity as the fourth value (alpha value) alpha must be a number between 0.0 and 1.0 (0.5 means 50% opacity)  h1 { color: rgba(102, 205, 170, 0.25); }  "
},
{
	"uri": "/21-class-resources/atom-themes/",
	"title": "Working with Atom Themes",
	"tags": [],
	"description": "",
	"content": " Changing Themes Atom allows you to easily switch between your installed themes by doing the following:\n Opening Atom Settings (mac: cmd + , | pc: ctrl + ,) Select Themes in the left-hand menu Select the dropdown menu labeled Syntax Themes Choose one of the installed themes listed in the dropdown menu  Atom comes pre-installed with a set of themes. See that section below to add new themes to Atom\n Installing New Themes Atom allows you to install themes created by developers who participate in Atom\u0026rsquo;s vibrant community. Atom has a dedication section on their official site for the discovery of these themes (Atom Themes)\nHere are steps involved in adding a new Atom theme:\n Visit https://atom.io/themes Find a theme that you\u0026rsquo;d like to install Press the install button on the theme\u0026rsquo;s page An alert will be displayed asking you if you would like to open Atom - select the option labeled Open Atom While in Atom Settings, press the button labeled Install to install the new theme Select Themes in the left-hand menu of Atom Settings Select the dropdown menu labeled Syntax Themes Select the newly installed theme from the dropdown menu to apply the new theme to Atom  Here\u0026rsquo;s an example of the installation of an Atom theme named Atom Material\n"
},
{
	"uri": "/11-variables-and-datatypes/",
	"title": "Variables &amp; Datatypes",
	"tags": [],
	"description": "",
	"content": " Lesson 11 Variables \u0026amp; Datatypes "
},
{
	"uri": "/12-conditionals-and-loops/",
	"title": "Conditionals &amp; Loops",
	"tags": [],
	"description": "",
	"content": " Lesson 12 Conditionals \u0026amp; Loops "
},
{
	"uri": "/00-course-intro-and-tools/what-is-frontend-development/",
	"title": "What Is front-end Development?",
	"tags": [],
	"description": "",
	"content": " Overview  Front-end web development, also known as client-side development is the practice of producing HTML, CSS and JavaScript for a website or Web Application so that a user can see and interact with them directly.  What are the primary technologies associated with front-end development?  HTML\n CSS\n Javascript\n  How is front-end development differ from back-end development?  Backend development, is also known as server-side development and involves storing data on behalf of users or customers\n Example: Amazon, stores information about all it\u0026rsquo;s customers\u0026rsquo; order history in a database  Also where a company\u0026rsquo;s business logic lives\n Example: Amazon will only qualify non-prime customers for free shipping if they spend over $50  The programming languages used for back-end development includes (but is not limited to) Ruby, Python, Java, Go and Javascript (using a technology called NodeJS)\n  "
},
{
	"uri": "/13-arrays-and-objects/",
	"title": "Arrays &amp; Objects",
	"tags": [],
	"description": "",
	"content": " Lesson 13 Arrays \u0026amp; Objects "
},
{
	"uri": "/final-projects/milestones-due-dates/create-submit-wireframes/",
	"title": "Create &amp; Submit Wireframes",
	"tags": [],
	"description": "",
	"content": " Milestone IV: Create and Submit Wireframes Details TBD\n Due Date: Monday, April 29nd  "
},
{
	"uri": "/07-page-layout-flexbox/exercise/",
	"title": "Exercise - Flexbox Froggy",
	"tags": [],
	"description": "",
	"content": " Exercise: Flexbox Froggy During this exercise, you\u0026rsquo;ll go through an interactive tutorial focused on learning flexbox\n Each student complete this tutorial\n Timebox: 20 mins\n  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/flex-flow-shorthand/",
	"title": "Flex Flow Shorthand",
	"tags": [],
	"description": "",
	"content": " Flex Flow shorthand  Allows developers to specify the flex-direction and flex-wrap properties at the same time   flex-flow: \u0026lt;‘flex-direction’\u0026gt; || \u0026lt;‘flex-wrap’\u0026gt;   //specifies flow-direction: row \u0026amp; flex-wrap: wrap flex-flow: row wrap  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/flex-grow/",
	"title": "Flex Grow",
	"tags": [],
	"description": "",
	"content": " flex-grow  defines the ability for a flex item to grow if necessary\n dictates what amount of the available space inside the flex container the item should take up\n a unitless measure that respresents a proportion or ratio\n flex-grow value overrides the width of the flex-item\n   .item { flex-grow: \u0026lt;number\u0026gt;; /* default 0 */ }  JS Bin on jsbin.com\nIn the example above, the 2nd flex-item (green box) has its flex-grow set to 2 while the other flex-items have their flex-grow set to 1\n"
},
{
	"uri": "/14-functions/",
	"title": "Functions",
	"tags": [],
	"description": "",
	"content": " Lesson 14 Functions "
},
{
	"uri": "/15-anonymous-functions-javascript-lab/",
	"title": "Anonymous Functions &amp; Javascript Lab",
	"tags": [],
	"description": "",
	"content": " Lesson 15 Anonymous Functions \u0026amp; Javascript "
},
{
	"uri": "/00-course-intro-and-tools/class-logistics-materials/",
	"title": "Class Logistics &amp; Materials",
	"tags": [],
	"description": "",
	"content": " Class Logistics  Class Schedule: Monday \u0026amp; Wednesdays, 6:30pm - 9:30pm, from Mar 18th through May 22nd\n Break: 15 minute break during the middle of class from 7:45pm to 8:00pm (subject to change depending on flow of the class, but you\u0026rsquo;ll always get a 15 min break)\n Class Materials: Most lessons will include a set of files that you\u0026rsquo;ll work with during that lesson, we\u0026rsquo;ll refer to these files as the \u0026ldquo;lesson files\u0026rdquo;\n Homework: Homework assignments will be assigned at the end of class on Wednesdays and assignments will be due the following Wednesday.\n Reading Assignment / Tutorials: Reading Assignments and Tutorials may be assigned after a class. They are usual short in nature and are meant to help increase your understanding of upcoming or past concepts. If assigned, you will be expected to complete them before the next class.\n Labs: Labs are in-class assignments completed at the end of class; they can be done completed individually or in groups.\n Code Alongs: Small projects or exercises that the instructor and the class complete together\n Exercises: Short in-class exercises that are completed either individually\n Final Project: Pick something your passionate about, only requirement will be the use of HTML, CSS and (some) Javascript\n  "
},
{
	"uri": "/01-html-basics/tag-overview/lists/",
	"title": "Lists",
	"tags": [],
	"description": "",
	"content": " Lists  3 different types of lists:\n Unordered - lists start with a bullet point by default Ordered - numbered lists Definition - set of terms along with definition of those terms (not used often)  Both unordered and ordered lists contain list items\n list items elements are the items within list, they use opening and closing tag\n list item elements are indented by default\n list items elements are always a child a list element (in this case the “unordered list” or ul element.\n   Unordered List Example of an unordered list\nJS Bin on jsbin.com\nOrdered List Example of an ordered list\nJS Bin on jsbin.com\nDefinition List Example of a definition list\nJS Bin on jsbin.com\n"
},
{
	"uri": "/07-page-layout-flexbox/code-along/",
	"title": "Code Along - Layout Challenge",
	"tags": [],
	"description": "",
	"content": " Code Along: Page Layout using Flexbox  Using Atom, open the folder called layout_challenge in your lesson_07_files folder. You will be using these files as starting off point.\n As a class, we\u0026rsquo;ll use flexbox to create the following page layouts (depicted in the images below)\n  "
},
{
	"uri": "/final-projects/milestones-due-dates/create-project-plan/",
	"title": "Create Project Plan",
	"tags": [],
	"description": "",
	"content": " Milestone V: Create Project Plan Details TBD\n Due Date: Monday, April 29th  Trello is a free project management tool that uses the kanban approach to track tasks\n - You will share (i.e. add us as team members) your trello board with the instruction team - **Deliverable**: Provide link to your Trello board here -- "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/flex-shrink/",
	"title": "Flex Shrink",
	"tags": [],
	"description": "",
	"content": " flex-shrink  defines the ability for a flex item to shrink if necessary.\n a unitless measure that respresents a proportion or ratio (similar to flex-grow)\n  "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/hsl/",
	"title": "HSL",
	"tags": [],
	"description": "",
	"content": " HSL  Introduced with CSS3\n Provides an alternative way to express colors based on:\n Hue (expressed as an angle between 0 and 360 degrees)\n Saturation (expressed as a percentage)\n Lightness (expressed as a percentage 0% =\u0026gt; white, 50% =\u0026gt; normal \u0026amp; 100% =\u0026gt; black)\n   body { background-color: hsl(0, 0%, 78%); }  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/justify-content/",
	"title": "Justify Content",
	"tags": [],
	"description": "",
	"content": " justify-content  defines the alignment along the main axis\n will distribute extra free space left after all the flex items have reached their maximum size\n  .container { justify-content: flex-start | flex-end | center | space-between | space-around; }  "
},
{
	"uri": "/16-responsive-design/",
	"title": "Responsive Design",
	"tags": [],
	"description": "",
	"content": " Lesson 16 Responsive Design "
},
{
	"uri": "/17-responsive-design-lab/",
	"title": "Responsive Design Lab",
	"tags": [],
	"description": "",
	"content": " Lesson 17 Responsive Design Lab "
},
{
	"uri": "/00-course-intro-and-tools/tools/",
	"title": "Course Tools",
	"tags": [],
	"description": "",
	"content": " Text Editor:\n Why?: Text editor is a program that developers use to create and edit a range of programming language files. We\u0026rsquo;ll be using Atom, because it\u0026rsquo;s open source (free) and really good.\n Download Atom\n  Browser:\n Why?: Google chrome is a robust browser with a variety of tools that are helpful to developers.\n Install Google Chrome\n  Github:\n Why?: Github (and Git) are tools/applications used to by developers to manage their code and work collaboratively with each other. You\u0026rsquo;ll be using Github/Git to submit our homework assignments. kj\n Create a Github Account\n Download the Github Desktop App\n  Slack:\n Why?: Is a popular chat application that we\u0026rsquo;ll be using as our primary method of communication both during and outside of class\n Join the GA NYC Part Time Students Slack Community slack channel\n You should have received an emailed invitation to join GA’s slack team\n Don’t see an invitation in your inbox? Check your spam folder - many of Slack’s invitation emails tend to end up there. Let me know if you weren’t sent an invite and we’ll get you sorted out.\n  Add yourself to the dedicated Slack Channel for our class named #fewd-3-18-19 (see instructions on how to join a Slack Channel here)\n  Wireframes:\n Why?: Wireframes are a planning tools that helps you visualize the layout and other aspects of your web projects before writing any code.\n Multiple options:\n Whimsical - free wireframing software\n Google Draw\n Pen \u0026amp; Paper\n  Example of a wireframe:\n   "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/align-items/",
	"title": "Align Items",
	"tags": [],
	"description": "",
	"content": " Align Items  defines the default behaviour for how flex items are laid out along the cross axis on the current line  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/flex-shorthand/",
	"title": "Flex Shorthand",
	"tags": [],
	"description": "",
	"content": " flex shorthand  allows developers to specify a flex-item\u0026rsquo;s flex-grow, flex-shrink and flex-basis all at the same time   .item { flex: none | [ \u0026lt;'flex-grow'\u0026gt; \u0026lt;'flex-shrink'\u0026gt;? || \u0026lt;'flex-basis'\u0026gt; ] }  "
},
{
	"uri": "/18-forms/",
	"title": "Forms",
	"tags": [],
	"description": "",
	"content": " Lesson 18 Forms "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/hsla/",
	"title": "HSLa",
	"tags": [],
	"description": "",
	"content": " HSLa  Just like HSL but adds the ability to specify opacity using an alpha value\n alpha must be a number between 0.0 and 1.0 (0.5 means 50% opacity)\n  body { background-color: hsla(0, 100%, 75%, 0.5); }  "
},
{
	"uri": "/final-projects/milestones-due-dates/host-final-project-on-github-pages/",
	"title": "Host Final Project using Github Pages",
	"tags": [],
	"description": "",
	"content": " Milestone VI: Host Final Project using Github Pages Details TBD\n Due Date: Monday, May 13th  "
},
{
	"uri": "/07-page-layout-flexbox/lab/",
	"title": "Lab - Layout Challenge",
	"tags": [],
	"description": "",
	"content": " Lab: Layout Challenge  Using Atom, open the folder called layout_challenge in your lesson_07_files folder. You will be using these files as starting off point.\n Work in teams to use flexbox to recreate the remaining layouts depicted in layout_challenge/layouts.pdf file\n Before you start building:\n Draw a wireframe of the layout Identify your flex containers Idenitfy your nested flex containers  Timebox: 45 mins\n  "
},
{
	"uri": "/01-html-basics/tag-overview/links/",
	"title": "Links",
	"tags": [],
	"description": "",
	"content": " Links  Links created using the \u0026lt;a\u0026gt; tag\n link tags use the href attribute (remember attributes come with a name and a value)\n The value of the href attribute is the location where the link will direct you after it has been clicked\n  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- contains information about the page --\u0026gt; \u0026lt;title\u0026gt;My page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026quot;https://www.cnn.com\u0026quot;\u0026gt; CNN \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;/about_us.html\u0026quot;\u0026gt;About Us\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/align-content/",
	"title": "Align Content",
	"tags": [],
	"description": "",
	"content": " Align Content  aligns a flex container\u0026rsquo;s lines within when there is extra space in the cross-axis\n align-content only applies when there are mutiple lines of flex items\n  .container { align-content: flex-start | flex-end | center | space-between | space-around | stretch; }  Live Example\nJS Bin on jsbin.com\nIn the example above we are using align-content: center to align the 2 wrapped rows of flex-items along the center of the cross-axis\n"
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/flex-property-examples/",
	"title": "Flex Property Examples",
	"tags": [],
	"description": "",
	"content": "Using the jsbin below, change the following properties and observe the result:\n Change the value of flex-direction property of the .container selector to the each of the following and observe the result:\n column row-reverse column-reverse  With the flex-direction set to row, change the value of justify-content property of the .container selector to the each of the following and observe the result:\n flex-start flex-end center space-between space-around  Follow all of the steps laid out in #2 above but this time set the flex-direction set to column and observe the changes\n With the flex-direction set to row, change the value of align-items property of the .container selector to the each of the following and observe the result:\n flex-start flex-end center stretch baseline  Follow all of the steps laid out in #5 above but this time set the flex-direction set to column and observe the changes\n Spend 5 minutes changing both the values of flex-direction, justify-content and align-items and observe the result\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/final-projects/milestones-due-dates/submit-final-project/",
	"title": "Submit Final Project",
	"tags": [],
	"description": "",
	"content": " Milestone VII: Submit Final Project Details TBD\n Due Date: Monday, May 20th  "
},
{
	"uri": "/00-course-intro-and-tools/folder-structure/",
	"title": "Folder Organization",
	"tags": [],
	"description": "",
	"content": " Recommended Folder Organization  Create a folder in your Documents (My Documents on Windows) folder called FEWD\n At beginning of every class, download and unzip (mac instructions | windows instructions) the \u0026ldquo;Lesson Files\u0026rdquo; for that lesson directly into your FEWD folder\n  While the lesson files will be hosted on Dropbox, you do not need to have a dropbox account to download the files.\n  As the course progresses you\u0026rsquo;ll have a neatly organized listing of all of your work that looks similar to this:  "
},
{
	"uri": "/01-html-basics/tag-overview/images/",
	"title": "Images",
	"tags": [],
	"description": "",
	"content": " Images  Images are placed in a \u0026lt;img\u0026gt;\n Empty element meaning there is no closing tag\n   \u0026lt;img src=\u0026quot;images/team_hands\u0026quot; alt=\u0026quot;a group of people touching hands in a star formation\u0026quot; title=\u0026quot;teamwork is awesome\u0026quot;\u0026gt;  Image Attributes  src - Tells browser where to find the image (may relative or absolute path)\n alt - Provides description of image for people who cannot see the image (accessibility)\n title - Used to provide additional information about the image. Most browsers will display this information in a tooltip.\n  Image File Formats  .png - Supports transparency and semi-transparency, great for logos, icons, and repeating background tiles. Almost always preferable to a gif.\n .gif - Can have basic transparency, typically a png is used instead\n .jpeg - No transparency, can be stored at different compression levels with varying amounts of \u0026ldquo;lossy-ness\u0026rdquo;, typically the best format for photos\n  Image example JS Bin on jsbin.com\n"
},
{
	"uri": "/00-course-intro-and-tools/keys-to-success/",
	"title": "Keys to Success",
	"tags": [],
	"description": "",
	"content": " Do your homework: More you practice the concepts learned in class, the faster you\u0026rsquo;ll pick them up\n Don\u0026rsquo;t try to memorize anything: You\u0026rsquo;ll memorize things naturally through the act of doing things over and over again. Besides, if you don\u0026rsquo;t remember something just look it up (i.e. google).\n Work smarter not harder: In additional to looking things up, developers are really good at referencing past code that they\u0026rsquo;ve used in the past to solve problems they encounter in the present. So keep your past code organized so you easily reference it later. You don\u0026rsquo;t get points for memorizing anything, but you do get points for being resourceful and using past work to help you move a litter faster today.\n Ask Questions: Don\u0026rsquo;t be afraid to ask questions, everyone learns differently, it\u0026rsquo;s the instructor\u0026rsquo;s responsibility to ensure you grasp the concepts. Your questions helps me (your instructor) understand what\u0026rsquo;s working and what\u0026rsquo;s not.\n Change your perspective of failure: Expects things to not work. That\u0026rsquo;s where the fun part and truly where the learning begins. It\u0026rsquo;s during the troubleshooting phase where\u0026rsquo;s you\u0026rsquo;ll gained a deep understanding of concepts taught in class. If everything worked the first time, you\u0026rsquo;d never learn anything :)\n Get comfortable with the fact that there are multiple ways to do things: If I gave a 10 experienced developers a coding homework assignment chances are that I will receive 10 different approaches and they\u0026rsquo;ll all be \u0026ldquo;correct\u0026rdquo; (meaning each approach will accomplish the stated goals of the assignment). There is no 1 right answers when it comes to coding. There are \u0026ldquo;best practices\u0026rdquo; some of which we will push in this course, others best practices will be learned through continued practice. Instead of focusing on what you think may be the \u0026ldquo;best\u0026rdquo; approach, just focus on ensuring that your program / assignments is the goals or requirements (\u0026ldquo;just get it things working first\u0026rdquo;).\n Perfection is the enemy of good enough: When you go through your homework assignments and labs your # 1 goal is to \u0026ldquo;just get things working\u0026rdquo; and not to make it perfect the first time. Get things working first (no matter how janky it may seem) and only after you\u0026rsquo;ve got it working should you go through the process developers call refactoring, optimizing the code without changing the behavior (i.e. making it look nice).\n Use names that make sense: As a developer you are going to be frequently tasked with naming things. Naming things is hard, but my advice is to be as explicit as possible. You should always write your code as if someone else is going to read it and you want them to be able to quickly understand what’s going on. One of the best ways to accomplish that is to use names that highly contextual. For example, if you have a variable that is supposed to represent a person’s first name, then be as explicit as possible:\n  // very bad - you don't get points for making names super short var n = \u0026quot;Kiara\u0026quot; // ok but not great var name = \u0026quot;Kiara\u0026quot; // best - explicit, there's no doubt what this variable should represent var firstName = \u0026quot;Kiara\u0026quot;  "
},
{
	"uri": "/01-html-basics/tag-overview/tables/",
	"title": "Tables",
	"tags": [],
	"description": "",
	"content": " Tables  Tables represent data in a grid format\n Table Tags\n \u0026lt;table\u0026gt;: element used to create a table\n \u0026lt;tr\u0026gt;: table row\n \u0026lt;td\u0026gt;: table data, represents a cell in the table\n \u0026lt;th\u0026gt;: table headings used to respresent the header for a column or a row\n   Learn more about tables here\n ---- Table examples  JS Bin on jsbin.com\nJS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/tag-overview/block-and-inline-elements/",
	"title": "Block &amp; Inline Elements",
	"tags": [],
	"description": "",
	"content": " Block Elements  Block elements always appear on a new line in the browser window\n \u0026lt;h1\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;ul\u0026gt;, and \u0026lt;li\u0026gt; are examples of block elements\n  JS Bin on jsbin.com\nInline Elements  Inline elements will always appear to continue on the same line as their neighboring elements\n \u0026lt;a\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;b\u0026gt;, and \u0026lt;em\u0026gt; are examples of inline elements\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/tag-overview/divs-spans/",
	"title": "Divs &amp; Spans",
	"tags": [],
	"description": "",
	"content": " Divs  Divs allow you to group a set of elements together in one block-level box  JS Bin on jsbin.com\n Divs are mainly used to break your content up into logical sections. By doing so, you have more control of the layout and appearance of your pages.  Spans  Spans are the inline equivalent to Divs\n Spans are used to either:\n contain a section of text where there is no other suitable element to differentiate it from its surrounding text\n contain a number of inline elements\n  most common reason why people use  elements is so that they can control the appearance of the content of these elements using CSS\n  JS Bin on jsbin.com\nThis example uses classes and css, we will cover these topics later in the course\n "
},
{
	"uri": "/01-html-basics/tag-overview/other-tags/",
	"title": "Other Tags",
	"tags": [],
	"description": "",
	"content": " Many more tags There are many other tags available to developers such as:\n \u0026lt;b\u0026gt; Makes text bold\u0026lt;/b\u0026gt; \u0026lt;i\u0026gt; Italic text \u0026lt;/i\u0026gt; \u0026lt;br/\u0026gt; Used to break text within a paragraph \u0026lt;hr /\u0026gt; Used to add a horizontal line to visually break up text  JS Bin on jsbin.com\nMDN (Mozilla Developer Network) is an excellent resource for all things HTML, CSS and Javascript. For a complete list of all tags avaiable click here\n "
},
{
	"uri": "/00-dev-tools-github-depr/",
	"title": "Dev Tools, Git &amp; Github",
	"tags": [],
	"description": "",
	"content": " Lesson 00 Dev Tools, Git \u0026amp; Github "
},
{
	"uri": "/course-materials/",
	"title": "Course Materials",
	"tags": [],
	"description": "",
	"content": " Course Materials "
},
{
	"uri": "/homework-assignments/",
	"title": "Homework Assignments",
	"tags": [],
	"description": "",
	"content": " Homework Assignments "
},
{
	"uri": "/final-projects/",
	"title": "Final Projects",
	"tags": [],
	"description": "",
	"content": " Final Projects "
},
{
	"uri": "/21-class-resources/",
	"title": "Class Resources",
	"tags": [],
	"description": "",
	"content": " Class Resources "
},
{
	"uri": "/01-html-basics/reading-assignment/",
	"title": "Reading Assignment",
	"tags": [],
	"description": "",
	"content": "View the following videos before the next class\n Video: What is Version Control (6 mins) \n Video: What is Git (8 mins)\n Video: What is Github? (4 mins)\n  Complete the following tutorial before the next class\n Tutorial: Hello World Github Tutorial  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "FEWD",
	"tags": [],
	"description": "",
	"content": " FEWD - front-end Web Development "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]