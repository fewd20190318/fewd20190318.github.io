[
{
	"uri": "/01-html-basics/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Understand how web pages are structured\n Introduce some of the most frequently used html tags\n  "
},
{
	"uri": "/00-course-intro-and-tools/",
	"title": "Course Introduction &amp; Tools",
	"tags": [],
	"description": "",
	"content": " Lesson 00 Class Introduction \u0026amp; Tools "
},
{
	"uri": "/03-relative-paths/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Learn about Relative Paths and why they are important  "
},
{
	"uri": "/01-html-basics/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " HTML Structure\n Overview of basic HTML Tags\n Code Along (GA Press Release)\n Lab (Cookie Recipe)\n  "
},
{
	"uri": "/03-relative-paths/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Discuss Relative Paths\n Complete Relative Paths exercise\n  "
},
{
	"uri": "/02-git-github/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Achieve high-level understanding of git and why developers use it\n Introduce students to a git workflow that will be used to submit (and recieve feeback on) assignments\n  "
},
{
	"uri": "/03-relative-paths/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " Relative Paths  Relative URLs can be used when linking to pages and files within your own website.\n Shorthand way of telling the browser where to find your files.\n Inform students that they have already seen this is use with the link tag when referencing a css file\n  "
},
{
	"uri": "/02-git-github/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Tools Overview \u0026amp; Folder Organization\n Git Overview\n Code Along: Working with Github\n Exercise: Working with Github\n  "
},
{
	"uri": "/01-html-basics/html-structure/",
	"title": "HTML Structure",
	"tags": [],
	"description": "",
	"content": " Front page of a newspaper\n Which elements stand out and why?\n What would happen if every word was the same size font?\n  Document in a word processor\nHTML document\nSummary  Structure helps readers better understand all forms of documents\n Documents leverage hierarchy, size and font weight to emphasize importance\n HTML pages are another type documents\n  "
},
{
	"uri": "/01-html-basics/",
	"title": "HTML Basics",
	"tags": [],
	"description": "",
	"content": " Lesson 01 HTML Basics "
},
{
	"uri": "/01-html-basics/html-tag-anatomy/",
	"title": "HTML Tag Anatomy",
	"tags": [],
	"description": "",
	"content": " What is a Tag?  Tags act like containers, they tell the browser what type of information lies between (aka the content) the opening and closing tag\n Opening Tag\n comprised of character(s) surrounded by less than and equal than signs (brackets) characters within the brackets indicates the tags purpose  Closing Tag\n Same as opening tag except closing tag contains a forward slash which informs browser that element has ended   Terms “tags” and “elements” are often used interchangeably\n Example  \u0026lt;a href=\u0026quot;https://www.cnn.com\u0026quot;\u0026gt; CNN \u0026lt;/a\u0026gt;  "
},
{
	"uri": "/03-relative-paths/example/",
	"title": "Example",
	"tags": [],
	"description": "",
	"content": " Example Project with Multiple Folders/Files Navigating within the Same Folder Linking from music index page to the music reviews page\n\u0026lt;a href=\u0026quot;reviews.html\u0026quot;\u0026gt; Music Reviews \u0026lt;/a\u0026gt;  Navigating to a file in a Child Folder Linking from the homepage (top-level index.html) to the music listings page\n\u0026lt;a href=\u0026quot;music/listings.html\u0026quot;\u0026gt; Music Listings \u0026lt;/a\u0026gt;  Navigating to a file in a Grandchild Folder Linking from the homepage (top-level index.html) to the dvd reviews page\n\u0026lt;a href=\u0026quot;movies/dvds/reviews.html\u0026quot;\u0026gt; DVD Reviews \u0026lt;/a\u0026gt;  Navigating up to a file in a Parent Folder Linking from the music reviews page to the homepage (top-level index.html)\n\u0026lt;a href=\u0026quot;../index.html\u0026quot;\u0026gt; Home \u0026lt;/a\u0026gt;  Use ../ to move up exactly 1 level in the folder hierarchy\nNavigating up to a file in a Grandparent Folder Linking from the dvd reviews page to the homepage (top-level index.html)\n\u0026lt;a href=\u0026quot;../../index.html\u0026quot;\u0026gt; Home \u0026lt;/a\u0026gt;  Here we used ../../ to move up 2 levels in the folder hierarchy\n"
},
{
	"uri": "/02-git-github/git-overview/",
	"title": "Git Overview",
	"tags": [],
	"description": "",
	"content": " What is Git?  Version control for Programmers\n Like Microsoft Word \u0026ldquo;Track Changes\u0026rdquo; feature with superpowers\n Makes it easy for programmers to collaborate and work on the same codebase\n SVN (subversion) and CVS are other version control programs (Git is the most popular)\n  What is Github?  Web-based Git repository hosting service\n Built on top of git\n Home to +90% of all open source projects\n Morphed into a \u0026ldquo;social network\u0026rdquo; for developers\n  Vocabulary  Repository Commit Branch Merge Push Pull Fork Clone Pull Request  Respository  Most basic element of GitHub\n A repository can be referred to as a projeect\n contains all of a project\u0026rsquo;s files\n Stores each file\u0026rsquo;s revision history\n Repositories can have multiple collaborators and can be either public or private.\n  Commit  A \u0026ldquo;revision\u0026rdquo;, is an individual change to a file (or set of files)\n Git\u0026rsquo;s version of \u0026ldquo;saving\u0026rdquo;\n Commits save a \u0026ldquo;snapshot\u0026rdquo; of all of the project\u0026rsquo;s files at that point in time\n Using commits you can \u0026ldquo;time travel\u0026rdquo; and navigate back to any previous commit that was made throughout the history of the project\n Commits usually contain a commit message which is a brief description of what changes were made\n  Branch  Parallel version of a repository\n Branches allow developers to work on new features without affecting the \u0026ldquo;master\u0026rdquo; branch and disrupting the \u0026ldquo;live\u0026rdquo; version\n The process of creating a separate branch to work on a feature is referred to as \u0026ldquo;creating a feature branch\u0026ldquo;\n After developers have added their new feature (on their feature branch) they will then make a Pull Request (which is a request for comments and a request to Merge their changes back into the main branch (master branch))\n  Master Branch  The default branch found in every Git respository\n For most companies, the master branch reflects that latest version of production code (i.e. working code available to customers)\n  Merge  Merging takes the changes from one branch (in the same repository or from a fork), and applies them into another\n This often happens as a Pull Request (which can be thought of as a request for comments and a request to merge into the another branch - usually the master branch)\n  Push  Refers to sending your committed changes to a remote repository such as GitHub.com\n For instance, if you change something locally, you\u0026rsquo;d want to then push those changes so that others may access them\n  Pull  Pulls code from a remote repository and merges it with code in your local repository (on your computer)  Fork  A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project\n Most commonly, forks are used to either propose changes to someone else\u0026rsquo;s project or to use someone else\u0026rsquo;s project as a starting point for your own idea\n  Clone  Copies a remote repository (i.e. repository in the cloud on a platform like Github.com) and creates a local copy of the repository on your computer\n Cloning creates a link between the the remote and local copy of a repository, allowing you to your code in sync between the two\n  Pull Request  Pull requests are proposed changes to a repository submitted by a user and accepted or rejected by a repository\u0026rsquo;s collaborators (i.e. team members).\n Pull requests can be thought of as a developer asking for permission to merge their changes into the master branch\n Pull requests each have their own discussion forum, where developer can discuss the changes requested and suggest further revisions.\n This discussion as also referred to as Code Reviews\n  Great resource for all things git can be found here\n "
},
{
	"uri": "/01-html-basics/html-attributes/",
	"title": "HTML Attributes",
	"tags": [],
	"description": "",
	"content": " What is an HTML Attribute?  Attributes provide additional information about the contents of the an element.\n They are placed in the opening tag\n They have two parts: name, value\n  Attribute Structure  Attribute Name\n Indicates what kind of extra information you are supplying to the browser about the content in the element characters within the brackets indicates the tags purpose  Attribute Value\n Information or setting for the attribute Is placed in double or single quotes   Example of a HTML Attribute  \u0026lt;img src=\u0026quot;mdn-logo-sm.png\u0026quot; alt=\u0026quot;MDN\u0026quot;\u0026gt;  A complete list of all the available HTML attributes can be found here\n "
},
{
	"uri": "/21-class-resources/keyboard-shortcuts/",
	"title": "Keyboard Shortcuts",
	"tags": [],
	"description": "",
	"content": " General Window Management \u0026amp; Browser Shortcuts    Action Mac Windows     Open Chrome Developer Tools Cmd + Option + i F2 or Ctrl + Shift + i   Refresh page Cmd + R Ctrl + R   Switch between applications Cmd + Tab Alt + Tab   Switch between windows in the same application Cmd + ~     Atom Shortcuts Files, Windows, Tabs Management    Command macOS Windows Linux Description     Open File (Fuzzy) cmd-p or cmd-t ctrl-p or ctrl-t ctrl-p or ctrl-t Opens the Fuzzy Finder   Browse Open Files cmd-b ctrl-b ctrl-b Browse tabs within the window   Previous Tab alt-cmd-left ctrl-pageup ctrl-pageup Cycles left through open tabs (in the active pane)   Next Tab alt-cmd-right ctrl-pagedown ctrl-pagedown Cycles right through open tabs (in the active page)   Toggle Tree View cmd-\\ ctrl-\\ ctrl-\\ Toggles Atom\u0026rsquo;s file Tree View   Show Available Snippets alt-shift-s alt-shift-s alt-shift-s Shows the snippets available to Atom   Save cmd-s ctrl-s ctrl-s Saves the currently active file   Save As shift-cmd-s ctrl-shift-s ctrl-shift-s Saves the currently active file under a different name   Save All alt-cmd-s   Saves all changed files   Close Tab cmd-w ctrl-w ctrl-w Closes the currently active tab   Close Window shift-cmd-w ctrl-shift-w ctrl-shift-w Closes the currently active editor window   Split Window cmd-k up/down/left/right ctrl-k up/down/left/right ctrl-k up/down/left/right Split the currently active tab in one of the four directions   Focus Pane cmd-k cmd-up/down/left/right ctrl-k ctrl-up/down/left/right ctrl-k ctrl-up/down/left/right Move the focus to the pane in one of the four directions   Toggle full screen ctrl-cmd-f F11 F11 Toggle full screen window    Editing    Command macOS Windows Linux Description     Duplicate Lines shift-cmd-d ctrl-shift-d ctrl-shift-d Duplicates the line of the current cursor position and creates a new line under it with the same contents   Delete Line ctrl-shift-k ctrl-shift-k ctrl-shift-k Deletes the current line   Move Line Up ctrl-cmd-up ctrl-up ctrl-up Moves the contents of the current cursor position up one line. If there is a line above with content, the current lines content will swap with the one above it.   Move Line Down ctrl-cmd-down ctrl-down ctrl-down Moves the contents of the current cursor position down one line. If there is a line below with content, the line\u0026rsquo;s content will swap with the one below it.   Find/Replace cmd-f ctrl-f ctrl-f Opens up the Find/Replace panel   Find Next cmd-g F3 F3 Toggles forward through the results of the current buffer in the file while the Find/Replace panel is active   Find Previous shift-cmd-g shift-F3 shift-F3 Toggles backward through the results of the current buffer in the file while the Find/Replace panel is active   Find in Project shift-cmd-f ctrl-shift-f ctrl-shift-f Opens the Find in Project Panel   Go To Line ctrl-g ctrl-g ctrl-g Opens the Go To Line panel   Go To Matching Bracket ctrl-m ctrl-m ctrl-m The cursor goes to the matching top bracket that the cursor is ecapsulated in   Select Line cmd-l ctrl-l ctrl-l Selects the entire line the cursor\u0026rsquo;s current position is in   Toggle Comment cmd-/ ctrl-/ ctrl-/ Toggles the selected text into a comment of the current grammar   Column Selection ctrl-shift-up/down ctrl-alt-up/down shift-alt-up/down Allows to select multiple rows, where the same edit will be applied   Select Same Words cmd-d ctrl-d ctrl-d If you select a word, and then hit the key combo for this command, Atom will select the next same word for you. Then you can either type directly (which will replace the old words) or use left or right arrow to append things.   Undo Selection cmd-u ctrl-u ctrl-u This undoes the previous selection, like from Select Same Words.   Select All The Same Words At Once cmd-ctrl-g alt-f3 alt-f3 This shortcut is similar to cmd-d/ctrl-d but it selects all the matching words at once.    "
},
{
	"uri": "/03-relative-paths/code-along-relative-paths/",
	"title": "Code Along - Relative Paths",
	"tags": [],
	"description": "",
	"content": " Code Along: Relative Paths  Using Atom, open the folder called relative_paths_exercise in your lesson_03_files folder. You will be using these files as starting off point.  Instructions  1) Add a link from the Homepage to the About page\n 2) Add a link from the About page to the Homepage\n 3) Add links from Homepage to index.html pages of the following sections:\n Mammals Birds Reptiles  4) Add links from the Homepage to the index.html pages of the following sections:\n Marsupials Placentals Monotremes  5) Add the associated images (from the provided image folder) to the index.html page of the following sections:\n Mammals Birds Reptiles  6) Add a link from the index.html pages of the Mammals, Reptiles and Birds section back to the Homepage\n 7) Add a link from the listing.html page of Monotremes back to the Homepage\n 8) Add a link from the listing.html page of the Marsupials section to the listing.html page of the Monotremes section\n 9) Add a link from the index.html page of the Placentals section to the index.html page of the Marsupials section\n 10) Add a link from the index.html page of the Marsupials section back to the homepage\n  "
},
{
	"uri": "/02-git-github/code-along-working-with-github/",
	"title": "Code Along: Working with Github",
	"tags": [],
	"description": "",
	"content": " During this exercise, we will be walking through the process of working with Git and Github.\nThe steps for submitting your assignments are detailed here\u0026rdquo;submitting your assignments are detailed here\u0026ldquo;\nSteps  1) Fork this US states repository located on Github.com\n 2) Clone the Repository using Github Desktop\n 3) Save the local copy of the repository in your FEWD/github folder\n 4) Open the project in Atom and fix the spelling errors found in index.html; save your work.\n 5) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Fixed spelling errors\u0026rdquo;\n 6) Push your changes to Github using Github Desktop\n 7) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 8) The states should be in alphabetical order. Go back to your project in Atom and ensure the state names are listed alphabetically. Save your work.\n 9) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Ordered state names alphabetically\u0026rdquo;.\n 10) Push your changes to Github using Github Desktop\n 11) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 12) Next you will be submitting your work comments, make Pull Request, the title of the pull request should be \u0026ldquo;Fixed issues spelling and order issues\u0026rdquo;\n 13) You just found out that you also need to add the 5 U.S. territories to the list (why didn\u0026rsquo;t these idiots tell me this the first time?? 😒 )\n Go back to your project in Atom and add the 5 U.S. territories. Save your work.\n 15) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added 5 U.S. territories\u0026rdquo;.\n 16) Push your changes to Github using Github Desktop\n 17) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 18) Observe, that you do not need to submit another Pull Request since your current Pull request is still \u0026ldquo;Open\u0026rdquo;.\n  Any commits pushed to a remote repository after a Pull Request has been made will be added to the existing Pull Request as long as it is still in an Open state\n "
},
{
	"uri": "/02-git-github/",
	"title": "Git &amp; Github",
	"tags": [],
	"description": "",
	"content": " Lesson 02 Git \u0026amp; Github "
},
{
	"uri": "/21-class-resources/atom-editor-settings/",
	"title": "Recommended Atom Editor Settings",
	"tags": [],
	"description": "",
	"content": " Setting indentation levels During our course we will be using a set indentation level of 2 spaces (1 indentation level = 2 spaces). Atom makes it easy conform to this approach by setting our tab to a set level of indentation.\nAfter updating this setting, pressing the tab key will represent one level of indentation which will translate to 2 spaces.\nDisplaying indentation guides Setting wordwrap Wordwrap ensures that long lines in your code are automatically wrapped to the next line. This improves readability of your code.\nSetting a default tab-size Indentation is important when it comes to coding. Good indentation improves the readability of your code and saves you time when troubleshooting issues. In this course we will be using a default tab-size of 2 spaces. This is a common setting in the software development world.\n"
},
{
	"uri": "/05-css-selectors/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Classes and IDs\n CSS Selectors Overview\n CSS Diner\n Code Along: Tags \u0026amp; Boxes\n Lab: Fashion Blog\n  "
},
{
	"uri": "/01-html-basics/tag-overview/",
	"title": "Tag Overview",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/04-css-basics/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Thinking in boxes\n What is CSS\n Adding CSS to your websites\n  "
},
{
	"uri": "/02-git-github/exercise-github-workflow/",
	"title": "Exercise: Working with Github",
	"tags": [],
	"description": "",
	"content": " Work together in pairs and follow the directions below.\nUse this Guide as reference\nSteps  1) Fork this repository located on Github.com\n 2) Clone the Repository using Github Desktop\n 3) Save the local copy of the repository in your FEWD/github folder\n 4) Open the project in Atom and and add the lyrics to Barney\u0026rsquo;s (you know the purple dinosaur) hit song \u0026ldquo;I Love You\u0026rdquo;. Save your work.\n 5) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added Barney lyrics\u0026rdquo;\n 6) Push your changes to Github using Github Desktop\n 7) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 8) Your client also wants an image of Barney to be added to the page. Find an image of Barney on the internet (family friendly please!) and updated your project in Atom.\n 9) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added Barney image\u0026rdquo;.\n 10) Push your changes to Github using Github Desktop\n 11) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 12) Next you will be submitting your work comments, make Pull Request, the title of the pull request should be \u0026ldquo;Completed barney website\u0026rdquo;\n 13) Your client also wants you to add the lyrics to the Barney Theme song.\n Go back to your project in Atom and add the lyrics to the Barney Theme song. Save your work\n 15) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added barney theme song lyrics\u0026rdquo;.\n 16) Push your changes to Github using Github Desktop\n 17) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 18) Observe, that you do not need to submit another Pull Request since your current Pull request is still \u0026ldquo;Open\u0026rdquo;.\n  Any commits pushed to a remote repository after a Pull Request has been made will be added to the existing Pull Request as long as it is still in an Open state\n "
},
{
	"uri": "/21-class-resources/homework-submission-github-workflow/",
	"title": "Github HW Submission Instructions",
	"tags": [],
	"description": "",
	"content": " Before you start Step 1: Ensure you have a github folder Ensure that you have a folder named gitHub in the FEWD folder . You will be using this folder to manage all of your work that lives in Github through the course. This folder only needs to be created once.\nStep 2: Log into to your Github account Ensure you are logged into your GitHub account on Github.com\nStep 3: Log into your Github Desktop application Ensure You have installed the Github Desktop Application on your computer and you have logged in the application using your GitHub username and password\nForking the Assignment Repository Step 4: Navigate to the HW Repository on Github.com The instructor will provide you with a link to the repository that houses the HW assignment on Github.com. Click on that link and you should be navigated to the repository page for the assignment located on Github.com.\nStep 5: Fork the HW Repository to create a copy under your account Next we will fork the repository that contains the homework assignment. Remember, forking a repository copies a repository and places it under your account.\nFork the repository by pressing the Fork button in the upper right hand corner:\nIf you have more than one Github account associated with your email address, you will be asked to pick one. I recommended that you select the account associated with your personal account (this is most likely listed first in the list).\n Step 6: Confirm fork was successful Confirm that the fork was successful by observing that a copy of the repository has been placed under your account.\nIn the example above, the github account named kareemgrant successfully forked (i.e. copied) the HW assignment repository (sample-hw-assignment) that is owned by an account named fewd20190318\nCloning the forked repository Congrats! You have forked the HW assignment repository to your account. However, you\u0026rsquo;re still not able to work on it, since the forked repository lives in the cloud on Github (another way to say this is that your repository is a remote repository) and you need a copy of the repository on your computer so you can work on it.\n The process of creating a local copy (i.e. on your computer) of a remote repository is called cloning. Cloning also allows both local and remote copies of a repository to stay in sync.\n We\u0026rsquo;ll be using the Github Desktop Application to clone our remote repositories. Make sure you have Github Desktop open on your computer. Also make sure you are signed in.\n  Step 7: Clone the forked repository Clone the repository by pressing on the button labeled Clone or download and then press the button labeled Open in Desktop. This action will open the Github Desktop application located on your computer.\nStep 8: Place the cloned repo into your FEWD/github folder While in Github Desktop navigate to your github folder located inside your FEWD folder (see Step 1)\nStep 9: Confirm clone was successfully placed in your FEWD/github folder On your computer, navigate to your FEWD/github folder and confirm the existences of a folder that has name that matches the name of your remote repository\nWorking on your assignment If you\u0026rsquo;ve made it this far you have successfully cloned your assignment repository and now you\u0026rsquo;re ready to start coding! Going forward, all of your work on this particular assignment will live in your FEWD/github/{name-of-your-assignment-repository} folder\nStep 10: Open the repository folder in your text editor Using Atom, open the project folder for your assignment repository (FEWD/github/{name-of-your-assignment-repository})\nYou should always open the top-level folder for your project with your text editor (Atom) and not individually project files. This will help you stay organized and help you keep your sanity.\n One way to confirm that you\u0026rsquo;ve opened the \u0026ldquo;top-level\u0026rdquo; folder of a project is to confirm that you can see only one project and all of its child files/folders in the Tree View located in the left pane. Use cmd + \\ (mac) or ctrl+\\ (pc) to toggle the Tree View\nStep 11: Work on your assignment You are going to work on your assignment the way your normally would. Ensuring that you constantly save your work (cmd+s - mac / ctrl+s - pc ) along the way.\n(Git) Commit your work While you work on your assignment it is highly recommended that you periodically Commit your code.\nCommitting is Git\u0026rsquo;s way of saving the history of the changes you\u0026rsquo;ve made on the assignment (much like the \u0026ldquo;Track Changes\u0026rdquo; feature of word processors). A commit takes a \u0026ldquo;snapshot\u0026rdquo; of your project\u0026rsquo;s entire codebase. This is extremely powerful as it allows you to \u0026ldquo;time travel\u0026rdquo; throughout your code.\nIt is a best practice to commit your code once you\u0026rsquo;ve finished a \u0026ldquo;unit\u0026rdquo; of work.\nIf you approach your assignments by breaking them up in parts or tasks, then a unit would represent that task.\nFor example: If you were tasked with building a portfolio site for a client the project could be broken into a series of small tasks such as:\n implement design layout\n add css styles\n add portfolio images\n etc\n  If you were using git, it would be a best practice to have a commit for each one of the tasks above.\nWhy? Because if something breaks and is beyond repair, you can easily revert to a past commit that you know works.\nGit requires that you submit a message with each commit. This message is used to communicate the unit of work that was done.\nStep 12: Make a commit using Github Desktop After you\u0026rsquo;ve made changes associated with a \u0026ldquo;unit\u0026rdquo; of work, you\u0026rsquo;re ready to commit.\nOpen Github Desktop and ensure that you have selected the correct project (in Github Desktop)\nAfter you commit you can go back to working on your \u0026ldquo;next unit of work\u0026rdquo; or step.\nYou aren\u0026rsquo;t required to take this approach of breaking up your assignment into tasks (or units of work) but it is highly recommended.\n (Git) Push your work to Github to keep your work synced You have been committing your code periodically and now you\u0026rsquo;d like to see your changes reflected on Github.com (i.e. the remote repository). However, after navigating to remote repository on Github.com you find that none of your recent changes are being reflected.\nThe reason you don\u0026rsquo;t see anything is because you haven\u0026rsquo;t pushed your code back up to the remote repository on Github. Pushing your code keeps your local repository and its associated remote repository in sync.\nStep 13: Push your code back to the remote repository on Github.com In Github Desktop (after you have committed all your changes) press the button labeled Push Origin to push your changes to Github.\nStep 14: Confirm your commits were successfully \u0026ldquo;pushed\u0026rdquo; back to Github.com Navigate to remote repository for the assignment on Github.com (i.e. the assignment repository that is located under your Github account).\nConfirm that the changes you made are displayed in the commit history of the remote repository.\nIn this example we see that the changes made locally (on your computers) are now reflected (aka they were synced) with the associated remote repository!\nSubmit your homework by making a Pull Request You\u0026rsquo;ve made all our commits and you\u0026rsquo;ve finished the assignment. Now you are ready to submit your homework for feedback.\nStep 15: Make a pull request While in your repository press the link labeled Pull Requests to submit your homework. See gif below for more information.\nWhen naming our pull request use the following format: HW Submission from [Your Full Name]\n"
},
{
	"uri": "/03-relative-paths/",
	"title": "Relative Paths",
	"tags": [],
	"description": "",
	"content": " Lesson 03 Relative Paths "
},
{
	"uri": "/04-css-basics/thinking-in-boxes/",
	"title": "Thinking in Boxes",
	"tags": [],
	"description": "",
	"content": " Understanding the CSS Box Model is key to understanding how CSS works\n Going forward, you should view every element as a box (because that\u0026rsquo;s how browsers view them)\n   Block elements in the image are outlined in red, while inline elements are outlined in green\n Every element is a box, some boxes contain other boxes \u0026lt;body\u0026gt;, \u0026lt;div\u0026gt; or \u0026lt;article\u0026gt;\n CSS allows you to create rules the control each individual box\n Let\u0026rsquo;s take a look at how a live site looks when we view it in terms of it\u0026rsquo;s boxes\n  "
},
{
	"uri": "/04-css-basics/css-intro/",
	"title": "Intro to CSS",
	"tags": [],
	"description": "",
	"content": " What is CSS?  Stands for Cascading Style Sheet\n Allows you to control design of page\n With CSS allows you to create rules that specify how the content of an element should appear\n  p { color: gray; }  Applying the CSS rule above will result in text color of all \u0026lt;p\u0026gt; tags being changed to gray.\nAnatomy of a CSS Rule  CSS works by associating rules with HTML elements.\n These rules govern how the content of specified elements should be displayed\n CSS Rules are made up of two parts: a selector and a declaration\n Selectors\n indicate which element the rule applies to  Declarations\n indicate how the elements referred to in the selector should be styled split into two parts (a property and a value), and are separated by a colon     p { color: black; } h1, h2, h3 { font-family: Gill Sans Extrabold, sans-serif; color: #191919; }  "
},
{
	"uri": "/04-css-basics/",
	"title": "CSS Basics",
	"tags": [],
	"description": "",
	"content": " Lesson 04 CSS Basics "
},
{
	"uri": "/04-css-basics/adding-css/",
	"title": "Adding CSS to your website",
	"tags": [],
	"description": "",
	"content": " There are three ways to add css to your site  1) Inline (avoid!)\n 2) Internal css using \u0026lt;style\u0026gt; tag (avoid!)\n 3) External file (best practice)\n  Inline CSS (avoid!)  This method involves adding styles directly to html elements using a style attribute   \u0026lt;body style=\u0026quot;background-color: orange;\u0026quot;\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt;  Internal CSS (avoid!)  This method involves adding styles directly to html elements using a \u0026lt;style\u0026gt; tag  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;style type=\u0026quot;text/css\u0026quot;\u0026gt; body { font-family: Arial; background-color: rgb(185, 179, 175); } h1 { color: rgb(255, 255, 255); } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Add CSS using an external stylesheet (Best Practice)  The use of external CSS stylesheets allows you to place all of your styles in a central location, any site-wide changes can be made in a single place\n A \u0026lt;link\u0026gt; tag must be used to connect a stylesheet to an html file\n  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;css/styles.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  //in css/styles.css body { font-family: Arial, sans-serif, serif; padding: 10px; } p { font-size: 14px; color: #333333; }  \u0026lt;link\u0026gt; Tag  Link tag is used to specify the relationship between an html file and an external file\n Here are some commonly used attributes for the \u0026lt;link\u0026gt; tag\n href: specifies the path to the external file\n rel: specifies the relationship between the HTML page and the file it is linked to. The value of this attribute should be stylesheet when linking to a CSS file\n type: specifies the type of document being linked to. This value should be \u0026ldquo;text/css\u0026rdquo;\n   The rel attribute is required when linking to css stylesheet\n"
},
{
	"uri": "/05-css-selectors/classes-and-ids/",
	"title": "Classes and Ids",
	"tags": [],
	"description": "",
	"content": " Classes and Ids  Both are just HTML attributes\n Should start with a letter or underscore\n Can be applied to any html element\n Important: Use of the class or id attribute by itself does not change the appearance of an element; CSS/Javascript must be involved\n  Class Attribute  Is used to group elements together, therefore establishing them as different from other elements on the page\n Element can share the same class attribute values (this could be applied to another type of element)\n   \u0026lt;!-- in html --\u0026gt; \u0026lt;p class='important'\u0026gt; Awesome content \u0026lt;/p\u0026gt;   // in css, use a period to specify a class selector in css .important { font-weight: bold; }  In css class selectors are specified using a . (period)\n Id Attribute  Used to uniquely identify elements on a page\n No two elements should have the same id value (otherwise it would not be unique)\n   \u0026lt;!-- in html --\u0026gt; \u0026lt;button id='add-task'\u0026gt; Add Task \u0026lt;/button\u0026gt;   // in css a '#' (hash) is used to specify an id selector #add-task { font-size: 12px; }  In css id selectors are specified using a # (hash)\n Naming classes and ids  Developers can choose any name they want for classes and ids, however the names you choose should be descriptive  When should you use classes instead of ids (or vice versa)?  Use classes if applying a general style to more than one element on the same page\n Use ids when you style element differently from any other instance of the same element\n Use ids when using javascript to precisely target elements\n  "
},
{
	"uri": "/course-materials/lesson-files/",
	"title": "Lesson Files",
	"tags": [],
	"description": "",
	"content": " Lesson Files  Lesson 00 files (Course Intro \u0026amp; Tools) : No files needed\n Lesson 01 files (HTML Basics)\n Lesson 02 files (Git/Github): No files needed\n Lesson 03 files (Relative Paths)\n Lesson 04 files (CSS Basics)\n Lesson 05 files (CSS Selectors): TBD\n Lesson 06 files (CSS Box Model): TBD\n Lesson 07 files (Page Layout with Flexbox): TBD\n Lesson 08 files (CSS Positioning \u0026amp; Colors): TBD\n  "
},
{
	"uri": "/01-html-basics/tag-overview/body-head-title/",
	"title": "Body, Head &amp; Title",
	"tags": [],
	"description": "",
	"content": " \u0026lt;html\u0026gt;, \u0026lt;body\u0026gt;, \u0026lt;head\u0026gt;, \u0026lt;title\u0026gt; The following tags make up the structure of all web pages\n \u0026lt;html\u0026gt;\n Represents the root (top-level element) of an HTML document, so it is also referred to as the root element\n All other elements must be descendants of this element.\n  \u0026lt;body\u0026gt;\n Everything inside the body tag is shown inside the browser window  \u0026lt;head\u0026gt;\n Contains information about the page (vs shown on the pages\n Title and Links to other files are usually specified in the head element\n  \u0026lt;title\u0026gt;\n Text here is displayed in the top of the browser (or on the tab in Chrome or other browsers that use tabs)   \u0026lt;title\u0026gt; is just one of many tags that can be placed inside of \u0026lt;head\u0026gt;, we\u0026rsquo;ll see more of them as we go through the class, for more information click here\n Example\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- contains information about the page --\u0026gt; \u0026lt;title\u0026gt; Title of the page \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Main Heading\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Some cool content\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  what is the DOCTYPE? There have been several versions of HTML and because of this each web page should begin with a DOCTYPE declaration to tell a browser which version of HTML the page is using (browsers will still usually display the page even if it is not included).\n "
},
{
	"uri": "/00-course-intro-and-tools/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Understand what the term \u0026ldquo;front-end Development\u0026rdquo; means\n Introduce tools you will be using throughout the class\n Cover class logistics, structure \u0026amp; keys to success\n  "
},
{
	"uri": "/05-css-selectors/",
	"title": "CSS Selectors",
	"tags": [],
	"description": "",
	"content": " Lesson 05 CSS Selectors "
},
{
	"uri": "/05-css-selectors/css-selectors/",
	"title": "CSS Selectors",
	"tags": [],
	"description": "",
	"content": " CSS Selectors Overview  Many different types of selectors that allow you to target rules to specific elements in an HTML document\n Selectors are case sensitive, must match element names and attributes exactly\n     Selector Meaning Example     Universal Selector Applies to all elements *{}   Type Selector Match elements names h1, h2, h3 {}   Class Selector Matches all elements with a class attribute value matching on specified after a period (.) .hint {}, p.hint {}   ID Selector Matches all elements with a id attribute value matching on specified after a hash (#) #offer {}   Child Selector Matches elements that are a direct child of another li \u0026gt; a {}   Descendant Selector Matches element that is a direct descendant of another (not just the child) p a {}   Adjacent Sibling Selector Matches first element that is a sibling of another h1+p {}   General Sibling Selector Matches all elements that is a sibling of another h1~p {}   Attribute Selector Attribute selectors select an element using the presence of a given attribute or attribute value input[type=\u0026quot;email\u0026quot;] {}    A complete list of all CSS Selectors can be found here\n "
},
{
	"uri": "/05-css-selectors/css-selectors-examples/",
	"title": "CSS Selectors Examples",
	"tags": [],
	"description": "",
	"content": " CSS Selectors Examples Child Selector Child Selector Example on jsbin.com\nDescendent Selector Descendant Selector Example on jsbin.com\nAdjacent Sibling Selector Adjacent Sibling Selector example on jsbin.com\nGeneral Sibling Selector General Sibling Selector Example on jsbin.com\n"
},
{
	"uri": "/06-css-box-model/",
	"title": "CSS Box Model",
	"tags": [],
	"description": "",
	"content": " Lesson 06 CSS Box Model "
},
{
	"uri": "/04-css-basics/code-along/",
	"title": "Code Along - About Me",
	"tags": [],
	"description": "",
	"content": " Code Along: Building an \u0026ldquo;About Me\u0026rdquo; page  As a class, we\u0026rsquo;ll walk through using html and css to build the \u0026ldquo;About Me\u0026rdquo; page depicted in the image below   Using Atom, open the folder called rocket_raccoon_about_me in your lesson_04_files folder. You will be using these files as starting off point.\n When building websites it is a best practice to have a plan in place before starting out. One popular planning tool is called a wireframe.\n Wireframes are low fidelity drawings that help you visualize the layout of your pages. We\u0026rsquo;ll talk about wireframes more in depth throughout the course.\n For this exercise we\u0026rsquo;ll be using the wireframe below to help guide is build out the About Me page:\n  "
},
{
	"uri": "/01-html-basics/code-along/",
	"title": "Code Along - GA Press Release",
	"tags": [],
	"description": "",
	"content": " Code Along: GA Press Release  As a class, we\u0026rsquo;ll walk through using html to build out an html version of a press release\n Using Sublime, open the folder called ga_press_release (found within the starter_code) folder\n  "
},
{
	"uri": "/04-css-basics/lab/",
	"title": "Lab - Portfolio page",
	"tags": [],
	"description": "",
	"content": " Lab: Start/Complete Portfolio Page  Individually or in teams to finishing the fictional developer\u0026rsquo;s site by building our their portfolio page (depicted in the image below)\n You will be adding a Portfolio page to your existing rocket_raccoon_about_me project\n Before you start building: Draw a wireframe of the layout to help you plan your approach\n The \u0026ldquo;About Me\u0026rdquo; and \u0026ldquo;Porfolio\u0026rdquo; pages should be linked using a relative url\n  "
},
{
	"uri": "/01-html-basics/lab/",
	"title": "Lab - Cookie Recipe",
	"tags": [],
	"description": "",
	"content": " Lab: Cookie Recipe  Work individually or in teams to create an html version of a Cookie recipe depicted in the images below\n Using Atom, open the folder called cookie_recipe in your lesson_01_files folder. You will be using these files as starting off point.\n Tips\n Focus on the content first, then the image then the CSS There will be some items that you will need to look up, CSS is one of them (don\u0026rsquo;t worry we will be going over this in the next class, but part of being a developer is being able to google your way to solutions)   "
},
{
	"uri": "/07-page-layout-flexbox/",
	"title": "Page Layout with Flexbox",
	"tags": [],
	"description": "",
	"content": " Lesson 07 Page Layout with Flexbox "
},
{
	"uri": "/08-css-positioning-and-colors/",
	"title": "CSS Positioning &amp; Colors",
	"tags": [],
	"description": "",
	"content": " Lesson 08 CSS Positioning \u0026amp; Colors "
},
{
	"uri": "/course-materials/solutions/",
	"title": "Solutions",
	"tags": [],
	"description": "",
	"content": " Solutions Disclaimer: These files are not meant to be viewed as the \u0026ldquo;right answer, instead view them as a way to learn how another developer approached the same problem.\n Lesson 01: HTML Basics  GA Press Release Solution Cookie Receipe Solution  Lesson 03: Relative Paths  Relative Paths Exercise Solution  "
},
{
	"uri": "/01-html-basics/tag-overview/text/",
	"title": "Text",
	"tags": [],
	"description": "",
	"content": " HTML Headings  Six (6) levels of headings h1 tags is used for main headings h2 tags are used for subheadings Remaining level headings used as needed based on your content hierarchy  Browsers display headings differently, but relative sizes will always be consistent (by default) - i.e. h1 will always be bigger than h2\n JS Bin on jsbin.com\nParagraphs  Use \u0026lt;p\u0026gt; element to display paragraphs\n By default, browser displays each paragraph on a new line\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/00-course-intro-and-tools/what-is-frontend-development/",
	"title": "What Is front-end Development?",
	"tags": [],
	"description": "",
	"content": " Overview  Front-end web development, also known as client-side development is the practice of producing HTML, CSS and JavaScript for a website or Web Application so that a user can see and interact with them directly.  What are the primary technologies associated with front-end development?  HTML\n CSS\n Javascript\n  How is front-end development differ from back-end development?  Backend development, is also known as server-side development and involves storing data on behalf of users or customers\n Example: Amazon, stores information about all it\u0026rsquo;s customers\u0026rsquo; order history in a database  Also where a company\u0026rsquo;s business logic lives\n Example: Amazon will only qualify non-prime customers for free shipping if they spend over $50  The programming languages used for back-end development includes (but is not limited to) Ruby, Python, Java, Go and Javascript (using a technology called NodeJS)\n  "
},
{
	"uri": "/00-course-intro-and-tools/class-logistics-materials/",
	"title": "Class Logistics &amp; Materials",
	"tags": [],
	"description": "",
	"content": " Class Logistics  Class Schedule: Monday \u0026amp; Wednesdays, 6:30pm - 9:30pm, from Mar 18th through May 22nd\n Break: 15 minute break during the middle of class from 7:45pm to 8:00pm (subject to change depending on flow of the class, but you\u0026rsquo;ll always get a 15 min break)\n Class Materials: Most lessons will include a set of files that you\u0026rsquo;ll work with during that lesson, we\u0026rsquo;ll refer to these files as the \u0026ldquo;lesson files\u0026rdquo;\n Homework: Homework assignments will be assigned at the end of class on Wednesdays and assignments will be due the following Wednesday.\n Reading Assignment / Tutorials: Reading Assignments and Tutorials may be assigned after a class. They are usual short in nature and are meant to help increase your understanding of upcoming or past concepts. If assigned, you will be expected to complete them before the next class.\n Labs: Labs are in-class assignments completed at the end of class; they can be done completed individually or in groups.\n Code Alongs: Small projects or exercises that the instructor and the class complete together\n Exercises: Short in-class exercises that are completed either individually\n Final Project: Pick something your passionate about, only requirement will be the use of HTML, CSS and (some) Javascript\n  "
},
{
	"uri": "/01-html-basics/tag-overview/lists/",
	"title": "Lists",
	"tags": [],
	"description": "",
	"content": " Lists  3 different types of lists:\n Unordered - lists start with a bullet point by default Ordered - numbered lists Definition - set of terms along with definition of those terms (not used often)  Both unordered and ordered lists contain list items\n list items elements are the items within list, they use opening and closing tag\n list item elements are indented by default\n list items elements are always a child a list element (in this case the “unordered list” or ul element.\n   Unordered List Example of an unordered list\nJS Bin on jsbin.com\nOrdered List Example of an ordered list\nJS Bin on jsbin.com\nDefinition List Example of a definition list\nJS Bin on jsbin.com\n"
},
{
	"uri": "/00-course-intro-and-tools/tools/",
	"title": "Course Tools",
	"tags": [],
	"description": "",
	"content": " Text Editor:\n Why?: Text editor is a program that developers use to create and edit a range of programming language files. We\u0026rsquo;ll be using Atom, because it\u0026rsquo;s open source (free) and really good.\n Download Atom\n  Browser:\n Why?: Google chrome is a robust browser with a variety of tools that are helpful to developers.\n Install Google Chrome\n  Github:\n Why?: Github (and Git) are tools/applications used to by developers to manage their code and work collaboratively with each other. You\u0026rsquo;ll be using Github/Git to submit our homework assignments. kj\n Create a Github Account\n Download the Github Desktop App\n  Slack:\n Why?: Is a popular chat application that we\u0026rsquo;ll be using as our primary method of communication both during and outside of class\n Join the GA NYC Part Time Students Slack Community slack channel\n You should have received an emailed invitation to join GA’s slack team\n Don’t see an invitation in your inbox? Check your spam folder - many of Slack’s invitation emails tend to end up there. Let me know if you weren’t sent an invite and we’ll get you sorted out.\n  Add yourself to the dedicated Slack Channel for our class named #fewd-3-18-19 (see instructions on how to join a Slack Channel here)\n  Wireframes:\n Why?: Wireframes are a planning tools that helps you visualize the layout and other aspects of your web projects before writing any code.\n Multiple options:\n Whimsical - free wireframing software\n Google Draw\n Pen \u0026amp; Paper\n  Example of a wireframe:\n   "
},
{
	"uri": "/01-html-basics/tag-overview/links/",
	"title": "Links",
	"tags": [],
	"description": "",
	"content": " Links  Links created using the \u0026lt;a\u0026gt; tag\n link tags use the href attribute (remember attributes come with a name and a value)\n The value of the href attribute is the location where the link will direct you after it has been clicked\n  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- contains information about the page --\u0026gt; \u0026lt;title\u0026gt;My page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026quot;https://www.cnn.com\u0026quot;\u0026gt; CNN \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;/about_us.html\u0026quot;\u0026gt;About Us\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  "
},
{
	"uri": "/00-course-intro-and-tools/folder-structure/",
	"title": "Folder Organization",
	"tags": [],
	"description": "",
	"content": " Recommended Folder Organization  Create a folder in your Documents (My Documents on Windows) folder called FEWD\n At beginning of every class, download and unzip (mac instructions | windows instructions) the \u0026ldquo;Lesson Files\u0026rdquo; for that lesson directly into your FEWD folder\n  While the lesson files will be hosted on Dropbox, you do not need to have a dropbox account to download the files.\n  As the course progresses you\u0026rsquo;ll have a neatly organized listing of all of your work that looks similar to this:  "
},
{
	"uri": "/01-html-basics/tag-overview/images/",
	"title": "Images",
	"tags": [],
	"description": "",
	"content": " Images  Images are placed in a \u0026lt;img\u0026gt;\n Empty element meaning there is no closing tag\n   \u0026lt;img src=\u0026quot;images/team_hands\u0026quot; alt=\u0026quot;a group of people touching hands in a star formation\u0026quot; title=\u0026quot;teamwork is awesome\u0026quot;\u0026gt;  Image Attributes  src - Tells browser where to find the image (may relative or absolute path)\n alt - Provides description of image for people who cannot see the image (accessibility)\n title - Used to provide additional information about the image. Most browsers will display this information in a tooltip.\n  Image File Formats  .png - Supports transparency and semi-transparency, great for logos, icons, and repeating background tiles. Almost always preferable to a gif.\n .gif - Can have basic transparency, typically a png is used instead\n .jpeg - No transparency, can be stored at different compression levels with varying amounts of \u0026ldquo;lossy-ness\u0026rdquo;, typically the best format for photos\n  Image example JS Bin on jsbin.com\n"
},
{
	"uri": "/00-course-intro-and-tools/keys-to-success/",
	"title": "Keys to Success",
	"tags": [],
	"description": "",
	"content": " Do your homework: More you practice the concepts learned in class, the faster you\u0026rsquo;ll pick them up\n Don\u0026rsquo;t try to memorize anything: You\u0026rsquo;ll memorize things naturally through the act of doing things over and over again. Besides, if you don\u0026rsquo;t remember something just look it up (i.e. google).\n Work smarter not harder: In additional to looking things up, developers are really good at referencing past code that they\u0026rsquo;ve used in the past to solve problems they encounter in the present. So keep your past code organized so you easily reference it later. You don\u0026rsquo;t get points for memorizing anything, but you do get points for being resourceful and using past work to help you move a litter faster today.\n Ask Questions: Don\u0026rsquo;t be afraid to ask questions, everyone learns differently, it\u0026rsquo;s the instructor\u0026rsquo;s responsibility to ensure you grasp the concepts. Your questions helps me (your instructor) understand what\u0026rsquo;s working and what\u0026rsquo;s not.\n Change your perspective of failure: Expects things to not work. That\u0026rsquo;s where the fun part and truly where the learning begins. It\u0026rsquo;s during the troubleshooting phase where\u0026rsquo;s you\u0026rsquo;ll gained a deep understanding of concepts taught in class. If everything worked the first time, you\u0026rsquo;d never learn anything :)\n Get comfortable with the fact that there are multiple ways to do things: If I gave a 10 experienced developers a coding homework assignment chances are that I will receive 10 different approaches and they\u0026rsquo;ll all be \u0026ldquo;correct\u0026rdquo; (meaning each approach will accomplish the stated goals of the assignment). There is no 1 right answers when it comes to coding. There are \u0026ldquo;best practices\u0026rdquo; some of which we will push in this course, others best practices will be learned through continued practice. Instead of focusing on what you think may be the \u0026ldquo;best\u0026rdquo; approach, just focus on ensuring that your program / assignments is the goals or requirements (\u0026ldquo;just get it things working first\u0026rdquo;).\n Perfection is the enemy of good enough: When you go through your homework assignments and labs your # 1 goal is to \u0026ldquo;just get things working\u0026rdquo; and not to make it perfect the first time. Get things working first (no matter how janky it may seem) and only after you\u0026rsquo;ve got it working should you go through the process developers call refactoring, optimizing the code without changing the behavior (i.e. making it look nice).\n Use names that make sense: As a developer you are going to be frequently tasked with naming things. Naming things is hard, but my advice is to be as explicit as possible. You should always write your code as if someone else is going to read it and you want them to be able to quickly understand what’s going on. One of the best ways to accomplish that is to use names that highly contextual. For example, if you have a variable that is supposed to represent a person’s first name, then be as explicit as possible:\n  // very bad - you don't get points for making names super short var n = \u0026quot;Kiara\u0026quot; // ok but not great var name = \u0026quot;Kiara\u0026quot; // best - explicit, there's no doubt what this variable should represent var firstName = \u0026quot;Kiara\u0026quot;  "
},
{
	"uri": "/01-html-basics/tag-overview/tables/",
	"title": "Tables",
	"tags": [],
	"description": "",
	"content": " Tables  Tables represent data in a grid format\n Table Tags\n \u0026lt;table\u0026gt;: element used to create a table\n \u0026lt;tr\u0026gt;: table row\n \u0026lt;td\u0026gt;: table data, represents a cell in the table\n \u0026lt;th\u0026gt;: table headings used to respresent the header for a column or a row\n   Learn more about tables here\n ---- Table examples  JS Bin on jsbin.com\nJS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/tag-overview/block-and-inline-elements/",
	"title": "Block &amp; Inline Elements",
	"tags": [],
	"description": "",
	"content": " Block Elements  Block elements always appear on a new line in the browser window\n \u0026lt;h1\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;ul\u0026gt;, and \u0026lt;li\u0026gt; are examples of block elements\n  JS Bin on jsbin.com\nInline Elements  Inline elements will always appear to continue on the same line as their neighboring elements\n \u0026lt;a\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;b\u0026gt;, and \u0026lt;em\u0026gt; are examples of inline elements\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/tag-overview/divs-spans/",
	"title": "Divs &amp; Spans",
	"tags": [],
	"description": "",
	"content": " Divs  Divs allow you to group a set of elements together in one block-level box  JS Bin on jsbin.com\n Divs are mainly used to break your content up into logical sections. By doing so, you have more control of the layout and appearance of your pages.  Spans  Spans are the inline equivalent to Divs\n Spans are used to either:\n contain a section of text where there is no other suitable element to differentiate it from its surrounding text\n contain a number of inline elements\n  most common reason why people use  elements is so that they can control the appearance of the content of these elements using CSS\n  JS Bin on jsbin.com\nThis example uses classes and css, we will cover these topics later in the course\n "
},
{
	"uri": "/01-html-basics/tag-overview/other-tags/",
	"title": "Other Tags",
	"tags": [],
	"description": "",
	"content": " Many more tags There are many other tags available to developers such as:\n \u0026lt;b\u0026gt; Makes text bold\u0026lt;/b\u0026gt; \u0026lt;i\u0026gt; Italic text \u0026lt;/i\u0026gt; \u0026lt;br/\u0026gt; Used to break text within a paragraph \u0026lt;hr /\u0026gt; Used to add a horizontal line to visually break up text  JS Bin on jsbin.com\nMDN (Mozilla Developer Network) is an excellent resource for all things HTML, CSS and Javascript. For a complete list of all tags avaiable click here\n "
},
{
	"uri": "/course-materials/",
	"title": "Course Materials",
	"tags": [],
	"description": "",
	"content": " Chapter X Course Materials "
},
{
	"uri": "/21-class-resources/",
	"title": "Class Resources",
	"tags": [],
	"description": "",
	"content": " Class Resources "
},
{
	"uri": "/01-html-basics/reading-assignment/",
	"title": "Reading Assignment",
	"tags": [],
	"description": "",
	"content": "View the following videos before the next class\n Video: What is Version Control (6 mins) \n Video: What is Git (8 mins)\n Video: What is Github? (4 mins)\n  Complete the following tutorial before the next class\n Tutorial: Hello World Github Tutorial  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "FEWD",
	"tags": [],
	"description": "",
	"content": " FEWD - front-end Web Development "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]